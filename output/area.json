{
  "wxml": [
    {
      "tag": "van-picker",
      "attrs": {
        "class": "van-area__picker",
        "active-class": "active-class",
        "toolbar-class": "toolbar-class",
        "column-class": "column-class",
        ":show-toolbar": "showToolbar",
        "value-key": "name",
        ":title": "title",
        ":loading": "loading",
        ":columns": "displayColumns",
        ":item-height": "itemHeight",
        ":visible-item-count": "visibleItemCount",
        ":cancel-button-text": "cancelButtonText",
        ":confirm-button-text": "confirmButtonText",
        "@change": "onChange",
        "@confirm": "onConfirm",
        "@cancel": "onCancel"
      }
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { pickerProps } from '../picker/shared';\nimport { requestAnimationFrame } from '../common/utils';\n\ntype AreaItem = {\n  name: string;\n  code: string;\n};\n\nconst EMPTY_CODE = '000000';\n\nVantComponent({\n  classes: ['active-class', 'toolbar-class', 'column-class'],\n\n  props: {\n    ...pickerProps,\n    showToolbar: {\n      type: Boolean,\n      value: true,\n    },\n    value: {\n      type: String,\n      observer(value: string) {\n        this.code = value;\n        this.setValues();\n      },\n    },\n    areaList: {\n      type: Object,\n      value: {},\n      observer: 'setValues',\n    },\n    columnsNum: {\n      type: null,\n      value: 3,\n    },\n    columnsPlaceholder: {\n      type: Array,\n      observer(val) {\n        this.setData({\n          typeToColumnsPlaceholder: {\n            province: val[0] || '',\n            city: val[1] || '',\n            county: val[2] || '',\n          },\n        });\n      },\n    },\n  },\n\n  data: {\n    columns: [{ values: [] }, { values: [] }, { values: [] }],\n    typeToColumnsPlaceholder: {},\n  },\n\n  mounted() {\n    requestAnimationFrame(() => {\n      this.setValues();\n    });\n  },\n\n  methods: {\n    getPicker() {\n      if (this.picker == null) {\n        this.picker = this.selectComponent('.van-area__picker');\n      }\n      return this.picker;\n    },\n\n    onCancel(event: WechatMiniprogram.CustomEvent) {\n      this.emit('cancel', event.detail);\n    },\n\n    onConfirm(event: WechatMiniprogram.CustomEvent) {\n      const { index } = event.detail;\n      let { value } = event.detail;\n      value = this.parseValues(value);\n      this.emit('confirm', { value, index });\n    },\n\n    emit(type: string, detail) {\n      detail.values = detail.value;\n      delete detail.value;\n      this.$emit(type, detail);\n    },\n\n    parseValues(values: AreaItem[]) {\n      const { columnsPlaceholder } = this.data;\n\n      return values.map((value, index) => {\n        if (\n          value &&\n          (!value.code || value.name === columnsPlaceholder[index])\n        ) {\n          return {\n            ...value,\n            code: '',\n            name: '',\n          };\n        }\n\n        return value;\n      });\n    },\n\n    onChange(event: WechatMiniprogram.CustomEvent) {\n      const { index, picker, value } = event.detail;\n      this.code = value[index].code;\n      this.setValues()?.then(() => {\n        this.$emit('change', {\n          picker,\n          values: this.parseValues(picker.getValues()),\n          index,\n        });\n      });\n    },\n\n    getConfig(type: string) {\n      const { areaList } = this.data;\n      return (areaList && areaList[`${type}_list`]) || {};\n    },\n\n    getList(type: string, code?: string): AreaItem[] {\n      if (type !== 'province' && !code) {\n        return [];\n      }\n\n      const { typeToColumnsPlaceholder } = this.data;\n      const list: Record<string, string> = this.getConfig(type);\n      let result = Object.keys(list).map((code) => ({\n        code,\n        name: list[code],\n      }));\n\n      if (code != null) {\n        // oversea code\n        if (code[0] === '9' && type === 'city') {\n          code = '9';\n        }\n\n        result = result.filter(\n          (item) => item.code.indexOf(code as string) === 0\n        );\n      }\n\n      if (typeToColumnsPlaceholder[type] && result.length) {\n        // set columns placeholder\n        const codeFill =\n          type === 'province'\n            ? ''\n            : type === 'city'\n            ? EMPTY_CODE.slice(2, 4)\n            : EMPTY_CODE.slice(4, 6);\n\n        result.unshift({\n          code: `${code}${codeFill}`,\n          name: typeToColumnsPlaceholder[type],\n        });\n      }\n\n      return result;\n    },\n\n    getIndex(type: string, code: string) {\n      let compareNum = type === 'province' ? 2 : type === 'city' ? 4 : 6;\n      const list = this.getList(type, code.slice(0, compareNum - 2));\n\n      // oversea code\n      if (code[0] === '9' && type === 'province') {\n        compareNum = 1;\n      }\n\n      code = code.slice(0, compareNum);\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n\n      return 0;\n    },\n\n    setValues() {\n      const picker = this.getPicker();\n\n      if (!picker) {\n        return;\n      }\n\n      let code = this.code || this.getDefaultCode();\n      const provinceList = this.getList('province');\n      const cityList = this.getList('city', code.slice(0, 2));\n\n      const stack: Promise<void>[] = [];\n      const indexes: number[] = [];\n      const { columnsNum } = this.data;\n\n      if (columnsNum >= 1) {\n        stack.push(picker.setColumnValues(0, provinceList, false));\n        indexes.push(this.getIndex('province', code));\n      }\n\n      if (columnsNum >= 2) {\n        stack.push(picker.setColumnValues(1, cityList, false));\n        indexes.push(this.getIndex('city', code));\n        if (cityList.length && code.slice(2, 4) === '00') {\n          [{ code }] = cityList;\n        }\n      }\n\n      if (columnsNum === 3) {\n        stack.push(\n          picker.setColumnValues(\n            2,\n            this.getList('county', code.slice(0, 4)),\n            false\n          )\n        );\n        indexes.push(this.getIndex('county', code));\n      }\n\n      return Promise.all(stack)\n        .catch(() => {})\n        .then(() => picker.setIndexes(indexes))\n        .catch(() => {});\n    },\n\n    getDefaultCode() {\n      const { columnsPlaceholder } = this.data;\n\n      if (columnsPlaceholder.length) {\n        return EMPTY_CODE;\n      }\n\n      const countyCodes = Object.keys(this.getConfig('county'));\n      if (countyCodes[0]) {\n        return countyCodes[0];\n      }\n\n      const cityCodes = Object.keys(this.getConfig('city'));\n      if (cityCodes[0]) {\n        return cityCodes[0];\n      }\n\n      return '';\n    },\n\n    getValues() {\n      const picker = this.getPicker();\n\n      if (!picker) {\n        return [];\n      }\n\n      return this.parseValues(picker.getValues().filter((value) => !!value));\n    },\n\n    getDetail() {\n      const values = this.getValues();\n      const area = {\n        code: '',\n        country: '',\n        province: '',\n        city: '',\n        county: '',\n      };\n\n      if (!values.length) {\n        return area;\n      }\n\n      const names = values.map((item: AreaItem) => item.name);\n      area.code = values[values.length - 1].code;\n      if (area.code[0] === '9') {\n        area.country = names[1] || '';\n        area.province = names[2] || '';\n      } else {\n        area.province = names[0] || '';\n        area.city = names[1] || '';\n        area.county = names[2] || '';\n      }\n\n      return area;\n    },\n\n    reset(code) {\n      this.code = code || '';\n      return this.setValues();\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { pickerProps } from '../picker/shared';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { requestAnimationFrame } from '../common/utils';"
      },
      {
        "kind": "TypeAliasDeclaration",
        "text": "type AreaItem = {\n  name: string;\n  code: string;\n};",
        "name": "AreaItem"
      },
      {
        "kind": "FirstStatement",
        "text": "const EMPTY_CODE = '000000';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  classes: ['active-class', 'toolbar-class', 'column-class'],\n\n  props: {\n    ...pickerProps,\n    showToolbar: {\n      type: Boolean,\n      value: true,\n    },\n    value: {\n      type: String,\n      observer(value: string) {\n        this.code = value;\n        this.setValues();\n      },\n    },\n    areaList: {\n      type: Object,\n      value: {},\n      observer: 'setValues',\n    },\n    columnsNum: {\n      type: null,\n      value: 3,\n    },\n    columnsPlaceholder: {\n      type: Array,\n      observer(val) {\n        this.setData({\n          typeToColumnsPlaceholder: {\n            province: val[0] || '',\n            city: val[1] || '',\n            county: val[2] || '',\n          },\n        });\n      },\n    },\n  },\n\n  data: {\n    columns: [{ values: [] }, { values: [] }, { values: [] }],\n    typeToColumnsPlaceholder: {},\n  },\n\n  mounted() {\n    requestAnimationFrame(() => {\n      this.setValues();\n    });\n  },\n\n  methods: {\n    getPicker() {\n      if (this.picker == null) {\n        this.picker = this.selectComponent('.van-area__picker');\n      }\n      return this.picker;\n    },\n\n    onCancel(event: WechatMiniprogram.CustomEvent) {\n      this.emit('cancel', event.detail);\n    },\n\n    onConfirm(event: WechatMiniprogram.CustomEvent) {\n      const { index } = event.detail;\n      let { value } = event.detail;\n      value = this.parseValues(value);\n      this.emit('confirm', { value, index });\n    },\n\n    emit(type: string, detail) {\n      detail.values = detail.value;\n      delete detail.value;\n      this.$emit(type, detail);\n    },\n\n    parseValues(values: AreaItem[]) {\n      const { columnsPlaceholder } = this.data;\n\n      return values.map((value, index) => {\n        if (\n          value &&\n          (!value.code || value.name === columnsPlaceholder[index])\n        ) {\n          return {\n            ...value,\n            code: '',\n            name: '',\n          };\n        }\n\n        return value;\n      });\n    },\n\n    onChange(event: WechatMiniprogram.CustomEvent) {\n      const { index, picker, value } = event.detail;\n      this.code = value[index].code;\n      this.setValues()?.then(() => {\n        this.$emit('change', {\n          picker,\n          values: this.parseValues(picker.getValues()),\n          index,\n        });\n      });\n    },\n\n    getConfig(type: string) {\n      const { areaList } = this.data;\n      return (areaList && areaList[`${type}_list`]) || {};\n    },\n\n    getList(type: string, code?: string): AreaItem[] {\n      if (type !== 'province' && !code) {\n        return [];\n      }\n\n      const { typeToColumnsPlaceholder } = this.data;\n      const list: Record<string, string> = this.getConfig(type);\n      let result = Object.keys(list).map((code) => ({\n        code,\n        name: list[code],\n      }));\n\n      if (code != null) {\n        // oversea code\n        if (code[0] === '9' && type === 'city') {\n          code = '9';\n        }\n\n        result = result.filter(\n          (item) => item.code.indexOf(code as string) === 0\n        );\n      }\n\n      if (typeToColumnsPlaceholder[type] && result.length) {\n        // set columns placeholder\n        const codeFill =\n          type === 'province'\n            ? ''\n            : type === 'city'\n            ? EMPTY_CODE.slice(2, 4)\n            : EMPTY_CODE.slice(4, 6);\n\n        result.unshift({\n          code: `${code}${codeFill}`,\n          name: typeToColumnsPlaceholder[type],\n        });\n      }\n\n      return result;\n    },\n\n    getIndex(type: string, code: string) {\n      let compareNum = type === 'province' ? 2 : type === 'city' ? 4 : 6;\n      const list = this.getList(type, code.slice(0, compareNum - 2));\n\n      // oversea code\n      if (code[0] === '9' && type === 'province') {\n        compareNum = 1;\n      }\n\n      code = code.slice(0, compareNum);\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n\n      return 0;\n    },\n\n    setValues() {\n      const picker = this.getPicker();\n\n      if (!picker) {\n        return;\n      }\n\n      let code = this.code || this.getDefaultCode();\n      const provinceList = this.getList('province');\n      const cityList = this.getList('city', code.slice(0, 2));\n\n      const stack: Promise<void>[] = [];\n      const indexes: number[] = [];\n      const { columnsNum } = this.data;\n\n      if (columnsNum >= 1) {\n        stack.push(picker.setColumnValues(0, provinceList, false));\n        indexes.push(this.getIndex('province', code));\n      }\n\n      if (columnsNum >= 2) {\n        stack.push(picker.setColumnValues(1, cityList, false));\n        indexes.push(this.getIndex('city', code));\n        if (cityList.length && code.slice(2, 4) === '00') {\n          [{ code }] = cityList;\n        }\n      }\n\n      if (columnsNum === 3) {\n        stack.push(\n          picker.setColumnValues(\n            2,\n            this.getList('county', code.slice(0, 4)),\n            false\n          )\n        );\n        indexes.push(this.getIndex('county', code));\n      }\n\n      return Promise.all(stack)\n        .catch(() => {})\n        .then(() => picker.setIndexes(indexes))\n        .catch(() => {});\n    },\n\n    getDefaultCode() {\n      const { columnsPlaceholder } = this.data;\n\n      if (columnsPlaceholder.length) {\n        return EMPTY_CODE;\n      }\n\n      const countyCodes = Object.keys(this.getConfig('county'));\n      if (countyCodes[0]) {\n        return countyCodes[0];\n      }\n\n      const cityCodes = Object.keys(this.getConfig('city'));\n      if (cityCodes[0]) {\n        return cityCodes[0];\n      }\n\n      return '';\n    },\n\n    getValues() {\n      const picker = this.getPicker();\n\n      if (!picker) {\n        return [];\n      }\n\n      return this.parseValues(picker.getValues().filter((value) => !!value));\n    },\n\n    getDetail() {\n      const values = this.getValues();\n      const area = {\n        code: '',\n        country: '',\n        province: '',\n        city: '',\n        county: '',\n      };\n\n      if (!values.length) {\n        return area;\n      }\n\n      const names = values.map((item: AreaItem) => item.name);\n      area.code = values[values.length - 1].code;\n      if (area.code[0] === '9') {\n        area.country = names[1] || '';\n        area.province = names[2] || '';\n      } else {\n        area.province = names[0] || '';\n        area.city = names[1] || '';\n        area.county = names[2] || '';\n      }\n\n      return area;\n    },\n\n    reset(code) {\n      this.code = code || '';\n      return this.setValues();\n    },\n  },\n});",
        "expression": "VantComponent({\n  classes: ['active-class', 'toolbar-class', 'column-class'],\n\n  props: {\n    ...pickerProps,\n    showToolbar: {\n      type: Boolean,\n      value: true,\n    },\n    value: {\n      type: String,\n      observer(value: string) {\n        this.code = value;\n        this.setValues();\n      },\n    },\n    areaList: {\n      type: Object,\n      value: {},\n      observer: 'setValues',\n    },\n    columnsNum: {\n      type: null,\n      value: 3,\n    },\n    columnsPlaceholder: {\n      type: Array,\n      observer(val) {\n        this.setData({\n          typeToColumnsPlaceholder: {\n            province: val[0] || '',\n            city: val[1] || '',\n            county: val[2] || '',\n          },\n        });\n      },\n    },\n  },\n\n  data: {\n    columns: [{ values: [] }, { values: [] }, { values: [] }],\n    typeToColumnsPlaceholder: {},\n  },\n\n  mounted() {\n    requestAnimationFrame(() => {\n      this.setValues();\n    });\n  },\n\n  methods: {\n    getPicker() {\n      if (this.picker == null) {\n        this.picker = this.selectComponent('.van-area__picker');\n      }\n      return this.picker;\n    },\n\n    onCancel(event: WechatMiniprogram.CustomEvent) {\n      this.emit('cancel', event.detail);\n    },\n\n    onConfirm(event: WechatMiniprogram.CustomEvent) {\n      const { index } = event.detail;\n      let { value } = event.detail;\n      value = this.parseValues(value);\n      this.emit('confirm', { value, index });\n    },\n\n    emit(type: string, detail) {\n      detail.values = detail.value;\n      delete detail.value;\n      this.$emit(type, detail);\n    },\n\n    parseValues(values: AreaItem[]) {\n      const { columnsPlaceholder } = this.data;\n\n      return values.map((value, index) => {\n        if (\n          value &&\n          (!value.code || value.name === columnsPlaceholder[index])\n        ) {\n          return {\n            ...value,\n            code: '',\n            name: '',\n          };\n        }\n\n        return value;\n      });\n    },\n\n    onChange(event: WechatMiniprogram.CustomEvent) {\n      const { index, picker, value } = event.detail;\n      this.code = value[index].code;\n      this.setValues()?.then(() => {\n        this.$emit('change', {\n          picker,\n          values: this.parseValues(picker.getValues()),\n          index,\n        });\n      });\n    },\n\n    getConfig(type: string) {\n      const { areaList } = this.data;\n      return (areaList && areaList[`${type}_list`]) || {};\n    },\n\n    getList(type: string, code?: string): AreaItem[] {\n      if (type !== 'province' && !code) {\n        return [];\n      }\n\n      const { typeToColumnsPlaceholder } = this.data;\n      const list: Record<string, string> = this.getConfig(type);\n      let result = Object.keys(list).map((code) => ({\n        code,\n        name: list[code],\n      }));\n\n      if (code != null) {\n        // oversea code\n        if (code[0] === '9' && type === 'city') {\n          code = '9';\n        }\n\n        result = result.filter(\n          (item) => item.code.indexOf(code as string) === 0\n        );\n      }\n\n      if (typeToColumnsPlaceholder[type] && result.length) {\n        // set columns placeholder\n        const codeFill =\n          type === 'province'\n            ? ''\n            : type === 'city'\n            ? EMPTY_CODE.slice(2, 4)\n            : EMPTY_CODE.slice(4, 6);\n\n        result.unshift({\n          code: `${code}${codeFill}`,\n          name: typeToColumnsPlaceholder[type],\n        });\n      }\n\n      return result;\n    },\n\n    getIndex(type: string, code: string) {\n      let compareNum = type === 'province' ? 2 : type === 'city' ? 4 : 6;\n      const list = this.getList(type, code.slice(0, compareNum - 2));\n\n      // oversea code\n      if (code[0] === '9' && type === 'province') {\n        compareNum = 1;\n      }\n\n      code = code.slice(0, compareNum);\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n\n      return 0;\n    },\n\n    setValues() {\n      const picker = this.getPicker();\n\n      if (!picker) {\n        return;\n      }\n\n      let code = this.code || this.getDefaultCode();\n      const provinceList = this.getList('province');\n      const cityList = this.getList('city', code.slice(0, 2));\n\n      const stack: Promise<void>[] = [];\n      const indexes: number[] = [];\n      const { columnsNum } = this.data;\n\n      if (columnsNum >= 1) {\n        stack.push(picker.setColumnValues(0, provinceList, false));\n        indexes.push(this.getIndex('province', code));\n      }\n\n      if (columnsNum >= 2) {\n        stack.push(picker.setColumnValues(1, cityList, false));\n        indexes.push(this.getIndex('city', code));\n        if (cityList.length && code.slice(2, 4) === '00') {\n          [{ code }] = cityList;\n        }\n      }\n\n      if (columnsNum === 3) {\n        stack.push(\n          picker.setColumnValues(\n            2,\n            this.getList('county', code.slice(0, 4)),\n            false\n          )\n        );\n        indexes.push(this.getIndex('county', code));\n      }\n\n      return Promise.all(stack)\n        .catch(() => {})\n        .then(() => picker.setIndexes(indexes))\n        .catch(() => {});\n    },\n\n    getDefaultCode() {\n      const { columnsPlaceholder } = this.data;\n\n      if (columnsPlaceholder.length) {\n        return EMPTY_CODE;\n      }\n\n      const countyCodes = Object.keys(this.getConfig('county'));\n      if (countyCodes[0]) {\n        return countyCodes[0];\n      }\n\n      const cityCodes = Object.keys(this.getConfig('city'));\n      if (cityCodes[0]) {\n        return cityCodes[0];\n      }\n\n      return '';\n    },\n\n    getValues() {\n      const picker = this.getPicker();\n\n      if (!picker) {\n        return [];\n      }\n\n      return this.parseValues(picker.getValues().filter((value) => !!value));\n    },\n\n    getDetail() {\n      const values = this.getValues();\n      const area = {\n        code: '',\n        country: '',\n        province: '',\n        city: '',\n        county: '',\n      };\n\n      if (!values.length) {\n        return area;\n      }\n\n      const names = values.map((item: AreaItem) => item.name);\n      area.code = values[values.length - 1].code;\n      if (area.code[0] === '9') {\n        area.country = names[1] || '';\n        area.province = names[2] || '';\n      } else {\n        area.province = names[0] || '';\n        area.city = names[1] || '';\n        area.county = names[2] || '';\n      }\n\n      return area;\n    },\n\n    reset(code) {\n      this.code = code || '';\n      return this.setValues();\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "classes": [
              "'active-class'",
              "'toolbar-class'",
              "'column-class'"
            ],
            "props": {
              "showToolbar": {
                "type": "Boolean",
                "value": "true"
              },
              "value": {
                "type": "String"
              },
              "areaList": {
                "type": "Object",
                "value": {},
                "observer": "setValues"
              },
              "columnsNum": {
                "type": "null",
                "value": "3"
              },
              "columnsPlaceholder": {
                "type": "Array"
              }
            },
            "data": {
              "columns": [
                "{ values: [] }",
                "{ values: [] }",
                "{ values: [] }"
              ],
              "typeToColumnsPlaceholder": {}
            },
            "methods": {
              "getPicker": "getPicker() {\n      if (this.picker == null) {\n        this.picker = this.selectComponent('.van-area__picker');\n      }\n      return this.picker;\n    }",
              "onCancel": "onCancel(event: WechatMiniprogram.CustomEvent) {\n      this.emit('cancel', event.detail);\n    }",
              "onConfirm": "onConfirm(event: WechatMiniprogram.CustomEvent) {\n      const { index } = event.detail;\n      let { value } = event.detail;\n      value = this.parseValues(value);\n      this.emit('confirm', { value, index });\n    }",
              "emit": "emit(type: string, detail) {\n      detail.values = detail.value;\n      delete detail.value;\n      this.$emit(type, detail);\n    }",
              "parseValues": "parseValues(values: AreaItem[]) {\n      const { columnsPlaceholder } = this.data;\n\n      return values.map((value, index) => {\n        if (\n          value &&\n          (!value.code || value.name === columnsPlaceholder[index])\n        ) {\n          return {\n            ...value,\n            code: '',\n            name: '',\n          };\n        }\n\n        return value;\n      });\n    }",
              "onChange": "onChange(event: WechatMiniprogram.CustomEvent) {\n      const { index, picker, value } = event.detail;\n      this.code = value[index].code;\n      this.setValues()?.then(() => {\n        this.$emit('change', {\n          picker,\n          values: this.parseValues(picker.getValues()),\n          index,\n        });\n      });\n    }",
              "getConfig": "getConfig(type: string) {\n      const { areaList } = this.data;\n      return (areaList && areaList[`${type}_list`]) || {};\n    }",
              "getList": "getList(type: string, code?: string): AreaItem[] {\n      if (type !== 'province' && !code) {\n        return [];\n      }\n\n      const { typeToColumnsPlaceholder } = this.data;\n      const list: Record<string, string> = this.getConfig(type);\n      let result = Object.keys(list).map((code) => ({\n        code,\n        name: list[code],\n      }));\n\n      if (code != null) {\n        // oversea code\n        if (code[0] === '9' && type === 'city') {\n          code = '9';\n        }\n\n        result = result.filter(\n          (item) => item.code.indexOf(code as string) === 0\n        );\n      }\n\n      if (typeToColumnsPlaceholder[type] && result.length) {\n        // set columns placeholder\n        const codeFill =\n          type === 'province'\n            ? ''\n            : type === 'city'\n            ? EMPTY_CODE.slice(2, 4)\n            : EMPTY_CODE.slice(4, 6);\n\n        result.unshift({\n          code: `${code}${codeFill}`,\n          name: typeToColumnsPlaceholder[type],\n        });\n      }\n\n      return result;\n    }",
              "getIndex": "getIndex(type: string, code: string) {\n      let compareNum = type === 'province' ? 2 : type === 'city' ? 4 : 6;\n      const list = this.getList(type, code.slice(0, compareNum - 2));\n\n      // oversea code\n      if (code[0] === '9' && type === 'province') {\n        compareNum = 1;\n      }\n\n      code = code.slice(0, compareNum);\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n\n      return 0;\n    }",
              "setValues": "setValues() {\n      const picker = this.getPicker();\n\n      if (!picker) {\n        return;\n      }\n\n      let code = this.code || this.getDefaultCode();\n      const provinceList = this.getList('province');\n      const cityList = this.getList('city', code.slice(0, 2));\n\n      const stack: Promise<void>[] = [];\n      const indexes: number[] = [];\n      const { columnsNum } = this.data;\n\n      if (columnsNum >= 1) {\n        stack.push(picker.setColumnValues(0, provinceList, false));\n        indexes.push(this.getIndex('province', code));\n      }\n\n      if (columnsNum >= 2) {\n        stack.push(picker.setColumnValues(1, cityList, false));\n        indexes.push(this.getIndex('city', code));\n        if (cityList.length && code.slice(2, 4) === '00') {\n          [{ code }] = cityList;\n        }\n      }\n\n      if (columnsNum === 3) {\n        stack.push(\n          picker.setColumnValues(\n            2,\n            this.getList('county', code.slice(0, 4)),\n            false\n          )\n        );\n        indexes.push(this.getIndex('county', code));\n      }\n\n      return Promise.all(stack)\n        .catch(() => {})\n        .then(() => picker.setIndexes(indexes))\n        .catch(() => {});\n    }",
              "getDefaultCode": "getDefaultCode() {\n      const { columnsPlaceholder } = this.data;\n\n      if (columnsPlaceholder.length) {\n        return EMPTY_CODE;\n      }\n\n      const countyCodes = Object.keys(this.getConfig('county'));\n      if (countyCodes[0]) {\n        return countyCodes[0];\n      }\n\n      const cityCodes = Object.keys(this.getConfig('city'));\n      if (cityCodes[0]) {\n        return cityCodes[0];\n      }\n\n      return '';\n    }",
              "getValues": "getValues() {\n      const picker = this.getPicker();\n\n      if (!picker) {\n        return [];\n      }\n\n      return this.parseValues(picker.getValues().filter((value) => !!value));\n    }",
              "getDetail": "getDetail() {\n      const values = this.getValues();\n      const area = {\n        code: '',\n        country: '',\n        province: '',\n        city: '',\n        county: '',\n      };\n\n      if (!values.length) {\n        return area;\n      }\n\n      const names = values.map((item: AreaItem) => item.name);\n      area.code = values[values.length - 1].code;\n      if (area.code[0] === '9') {\n        area.country = names[1] || '';\n        area.province = names[2] || '';\n      } else {\n        area.province = names[0] || '';\n        area.city = names[1] || '';\n        area.county = names[2] || '';\n      }\n\n      return area;\n    }",
              "reset": "reset(code) {\n      this.code = code || '';\n      return this.setValues();\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "function displayColumns(columns, columnsNum) {\n  return columns.slice(0, +columnsNum);\n}\n\nmodule.exports = {\n  displayColumns: displayColumns,\n};\n",
    "statements": [
      {
        "kind": "FunctionDeclaration",
        "text": "function displayColumns(columns, columnsNum) {\n  return columns.slice(0, +columnsNum);\n}",
        "name": "displayColumns"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  displayColumns: displayColumns,\n};",
        "expression": "module.exports = {\n  displayColumns: displayColumns,\n}"
      }
    ]
  },
  "wxss": ""
}