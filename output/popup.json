{
  "wxml": [
    {
      "tag": "import",
      "attrs": {
        "src": "./popup.wxml"
      }
    },
    {
      "tag": "van-overlay",
      "attrs": {
        "v-if": "overlay",
        ":show": "show",
        ":z-index": "zIndex",
        ":custom-style": "overlayStyle",
        ":duration": "duration",
        "@click": "onClickOverlay",
        ":lock-scroll": "lockScroll",
        ":root-portal": "rootPortal"
      }
    },
    {
      "tag": "root-portal",
      "attrs": {
        "v-if": "rootPortal"
      },
      "children": [
        {
          "tag": "include",
          "attrs": {
            "src": "./popup.wxml"
          }
        }
      ]
    },
    {
      "tag": "include",
      "attrs": {
        "v-else": "",
        "src": "./popup.wxml"
      }
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { transition } from '../mixins/transition';\n\nVantComponent({\n  classes: [\n    'enter-class',\n    'enter-active-class',\n    'enter-to-class',\n    'leave-class',\n    'leave-active-class',\n    'leave-to-class',\n    'close-icon-class',\n  ],\n\n  mixins: [transition(false)],\n\n  props: {\n    round: Boolean,\n    closeable: Boolean,\n    customStyle: String,\n    overlayStyle: String,\n    transition: {\n      type: String,\n      observer: 'observeClass',\n    },\n    zIndex: {\n      type: Number,\n      value: 100,\n    },\n    overlay: {\n      type: Boolean,\n      value: true,\n    },\n    closeIcon: {\n      type: String,\n      value: 'cross',\n    },\n    closeIconPosition: {\n      type: String,\n      value: 'top-right',\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true,\n    },\n    position: {\n      type: String,\n      value: 'center',\n      observer: 'observeClass',\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true,\n    },\n    safeAreaInsetTop: {\n      type: Boolean,\n      value: false,\n    },\n    safeAreaTabBar: {\n      type: Boolean,\n      value: false,\n    },\n    lockScroll: {\n      type: Boolean,\n      value: true,\n    },\n    rootPortal: {\n      type: Boolean,\n      value: false,\n    },\n  },\n\n  created() {\n    this.observeClass();\n  },\n\n  methods: {\n    onClickCloseIcon() {\n      this.$emit('close');\n    },\n\n    onClickOverlay() {\n      this.$emit('click-overlay');\n\n      if (this.data.closeOnClickOverlay) {\n        this.$emit('close');\n      }\n    },\n\n    observeClass() {\n      const { transition, position, duration } = this.data;\n\n      const updateData: { [key: string]: any } = {\n        name: transition || position,\n      };\n\n      if (transition === 'none') {\n        updateData.duration = 0;\n        this.originDuration = duration;\n      } else if (this.originDuration != null) {\n        updateData.duration = this.originDuration;\n      }\n\n      this.setData(updateData);\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { transition } from '../mixins/transition';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  classes: [\n    'enter-class',\n    'enter-active-class',\n    'enter-to-class',\n    'leave-class',\n    'leave-active-class',\n    'leave-to-class',\n    'close-icon-class',\n  ],\n\n  mixins: [transition(false)],\n\n  props: {\n    round: Boolean,\n    closeable: Boolean,\n    customStyle: String,\n    overlayStyle: String,\n    transition: {\n      type: String,\n      observer: 'observeClass',\n    },\n    zIndex: {\n      type: Number,\n      value: 100,\n    },\n    overlay: {\n      type: Boolean,\n      value: true,\n    },\n    closeIcon: {\n      type: String,\n      value: 'cross',\n    },\n    closeIconPosition: {\n      type: String,\n      value: 'top-right',\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true,\n    },\n    position: {\n      type: String,\n      value: 'center',\n      observer: 'observeClass',\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true,\n    },\n    safeAreaInsetTop: {\n      type: Boolean,\n      value: false,\n    },\n    safeAreaTabBar: {\n      type: Boolean,\n      value: false,\n    },\n    lockScroll: {\n      type: Boolean,\n      value: true,\n    },\n    rootPortal: {\n      type: Boolean,\n      value: false,\n    },\n  },\n\n  created() {\n    this.observeClass();\n  },\n\n  methods: {\n    onClickCloseIcon() {\n      this.$emit('close');\n    },\n\n    onClickOverlay() {\n      this.$emit('click-overlay');\n\n      if (this.data.closeOnClickOverlay) {\n        this.$emit('close');\n      }\n    },\n\n    observeClass() {\n      const { transition, position, duration } = this.data;\n\n      const updateData: { [key: string]: any } = {\n        name: transition || position,\n      };\n\n      if (transition === 'none') {\n        updateData.duration = 0;\n        this.originDuration = duration;\n      } else if (this.originDuration != null) {\n        updateData.duration = this.originDuration;\n      }\n\n      this.setData(updateData);\n    },\n  },\n});",
        "expression": "VantComponent({\n  classes: [\n    'enter-class',\n    'enter-active-class',\n    'enter-to-class',\n    'leave-class',\n    'leave-active-class',\n    'leave-to-class',\n    'close-icon-class',\n  ],\n\n  mixins: [transition(false)],\n\n  props: {\n    round: Boolean,\n    closeable: Boolean,\n    customStyle: String,\n    overlayStyle: String,\n    transition: {\n      type: String,\n      observer: 'observeClass',\n    },\n    zIndex: {\n      type: Number,\n      value: 100,\n    },\n    overlay: {\n      type: Boolean,\n      value: true,\n    },\n    closeIcon: {\n      type: String,\n      value: 'cross',\n    },\n    closeIconPosition: {\n      type: String,\n      value: 'top-right',\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true,\n    },\n    position: {\n      type: String,\n      value: 'center',\n      observer: 'observeClass',\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true,\n    },\n    safeAreaInsetTop: {\n      type: Boolean,\n      value: false,\n    },\n    safeAreaTabBar: {\n      type: Boolean,\n      value: false,\n    },\n    lockScroll: {\n      type: Boolean,\n      value: true,\n    },\n    rootPortal: {\n      type: Boolean,\n      value: false,\n    },\n  },\n\n  created() {\n    this.observeClass();\n  },\n\n  methods: {\n    onClickCloseIcon() {\n      this.$emit('close');\n    },\n\n    onClickOverlay() {\n      this.$emit('click-overlay');\n\n      if (this.data.closeOnClickOverlay) {\n        this.$emit('close');\n      }\n    },\n\n    observeClass() {\n      const { transition, position, duration } = this.data;\n\n      const updateData: { [key: string]: any } = {\n        name: transition || position,\n      };\n\n      if (transition === 'none') {\n        updateData.duration = 0;\n        this.originDuration = duration;\n      } else if (this.originDuration != null) {\n        updateData.duration = this.originDuration;\n      }\n\n      this.setData(updateData);\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "classes": [
              "'enter-class'",
              "'enter-active-class'",
              "'enter-to-class'",
              "'leave-class'",
              "'leave-active-class'",
              "'leave-to-class'",
              "'close-icon-class'"
            ],
            "mixins": [
              "transition(false)"
            ],
            "props": {
              "round": "Boolean",
              "closeable": "Boolean",
              "customStyle": "String",
              "overlayStyle": "String",
              "transition": {
                "type": "String",
                "observer": "observeClass"
              },
              "zIndex": {
                "type": "Number",
                "value": "100"
              },
              "overlay": {
                "type": "Boolean",
                "value": "true"
              },
              "closeIcon": {
                "type": "String",
                "value": "cross"
              },
              "closeIconPosition": {
                "type": "String",
                "value": "top-right"
              },
              "closeOnClickOverlay": {
                "type": "Boolean",
                "value": "true"
              },
              "position": {
                "type": "String",
                "value": "center",
                "observer": "observeClass"
              },
              "safeAreaInsetBottom": {
                "type": "Boolean",
                "value": "true"
              },
              "safeAreaInsetTop": {
                "type": "Boolean",
                "value": "false"
              },
              "safeAreaTabBar": {
                "type": "Boolean",
                "value": "false"
              },
              "lockScroll": {
                "type": "Boolean",
                "value": "true"
              },
              "rootPortal": {
                "type": "Boolean",
                "value": "false"
              }
            },
            "methods": {
              "onClickCloseIcon": "onClickCloseIcon() {\n      this.$emit('close');\n    }",
              "onClickOverlay": "onClickOverlay() {\n      this.$emit('click-overlay');\n\n      if (this.data.closeOnClickOverlay) {\n        this.$emit('close');\n      }\n    }",
              "observeClass": "observeClass() {\n      const { transition, position, duration } = this.data;\n\n      const updateData: { [key: string]: any } = {\n        name: transition || position,\n      };\n\n      if (transition === 'none') {\n        updateData.duration = 0;\n        this.originDuration = duration;\n      } else if (this.originDuration != null) {\n        updateData.duration = this.originDuration;\n      }\n\n      this.setData(updateData);\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "var style = require('../wxs/style.wxs');\n\nfunction popupStyle(data) {\n  return style([\n    {\n      'z-index': data.zIndex,\n      '-webkit-transition-duration': data.currentDuration + 'ms',\n      'transition-duration': data.currentDuration + 'ms',\n    },\n    data.display ? null : 'display: none',\n    data.customStyle,\n  ]);\n}\n\nmodule.exports = {\n  popupStyle: popupStyle,\n};\n",
    "statements": [
      {
        "kind": "FirstStatement",
        "text": "var style = require('../wxs/style.wxs');"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function popupStyle(data) {\n  return style([\n    {\n      'z-index': data.zIndex,\n      '-webkit-transition-duration': data.currentDuration + 'ms',\n      'transition-duration': data.currentDuration + 'ms',\n    },\n    data.display ? null : 'display: none',\n    data.customStyle,\n  ]);\n}",
        "name": "popupStyle"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  popupStyle: popupStyle,\n};",
        "expression": "module.exports = {\n  popupStyle: popupStyle,\n}"
      }
    ]
  },
  "wxss": ".van-popup{-webkit-overflow-scrolling:touch;animation:ease both;background-color:var(--popup-background-color,#fff);box-sizing:border-box;max-height:100%;overflow-y:auto;position:fixed;transition-timing-function:ease}.van-popup--center{left:50%;top:50%;transform:translate3d(-50%,-50%,0)}.van-popup--center.van-popup--round{border-radius:var(--popup-round-border-radius,16px)}.van-popup--top{left:0;top:0;width:100%}.van-popup--top.van-popup--round{border-radius:0 0 var(--popup-round-border-radius,var(--popup-round-border-radius,16px)) var(--popup-round-border-radius,var(--popup-round-border-radius,16px))}.van-popup--right{right:0;top:50%;transform:translate3d(0,-50%,0)}.van-popup--right.van-popup--round{border-radius:var(--popup-round-border-radius,var(--popup-round-border-radius,16px)) 0 0 var(--popup-round-border-radius,var(--popup-round-border-radius,16px))}.van-popup--bottom{bottom:0;left:0;width:100%}.van-popup--bottom.van-popup--round{border-radius:var(--popup-round-border-radius,var(--popup-round-border-radius,16px)) var(--popup-round-border-radius,var(--popup-round-border-radius,16px)) 0 0}.van-popup--left{left:0;top:50%;transform:translate3d(0,-50%,0)}.van-popup--left.van-popup--round{border-radius:0 var(--popup-round-border-radius,var(--popup-round-border-radius,16px)) var(--popup-round-border-radius,var(--popup-round-border-radius,16px)) 0}.van-popup--bottom.van-popup--safe{padding-bottom:env(safe-area-inset-bottom)}.van-popup--bottom.van-popup--safeTabBar,.van-popup--top.van-popup--safeTabBar{bottom:var(--tabbar-height,50px)}.van-popup--safeTop{padding-top:env(safe-area-inset-top)}.van-popup__close-icon{color:var(--popup-close-icon-color,#969799);font-size:var(--popup-close-icon-size,18px);position:absolute;z-index:var(--popup-close-icon-z-index,1)}.van-popup__close-icon--top-left{left:var(--popup-close-icon-margin,16px);top:var(--popup-close-icon-margin,16px)}.van-popup__close-icon--top-right{right:var(--popup-close-icon-margin,16px);top:var(--popup-close-icon-margin,16px)}.van-popup__close-icon--bottom-left{bottom:var(--popup-close-icon-margin,16px);left:var(--popup-close-icon-margin,16px)}.van-popup__close-icon--bottom-right{bottom:var(--popup-close-icon-margin,16px);right:var(--popup-close-icon-margin,16px)}.van-popup__close-icon:active{opacity:.6}.van-scale-enter-active,.van-scale-leave-active{transition-property:opacity,transform}.van-scale-enter,.van-scale-leave-to{opacity:0;transform:translate3d(-50%,-50%,0) scale(.7)}.van-fade-enter-active,.van-fade-leave-active{transition-property:opacity}.van-fade-enter,.van-fade-leave-to{opacity:0}.van-center-enter-active,.van-center-leave-active{transition-property:opacity}.van-center-enter,.van-center-leave-to{opacity:0}.van-bottom-enter-active,.van-bottom-leave-active,.van-left-enter-active,.van-left-leave-active,.van-right-enter-active,.van-right-leave-active,.van-top-enter-active,.van-top-leave-active{transition-property:transform}.van-bottom-enter,.van-bottom-leave-to{transform:translate3d(0,100%,0)}.van-top-enter,.van-top-leave-to{transform:translate3d(0,-100%,0)}.van-left-enter,.van-left-leave-to{transform:translate3d(-100%,-50%,0)}.van-right-enter,.van-right-leave-to{transform:translate3d(100%,-50%,0)}"
}