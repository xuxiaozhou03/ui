{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "{{ border ? 'van-hairline--top-bottom' : '' }} {{ utils.bem('tabbar', { fixed, safe: safeAreaInsetBottom }) }} custom-class",
        ":style": "zIndex ? 'z-index: ' + zIndex : ''"
      },
      "children": [
        {
          "tag": "slot"
        }
      ]
    },
    {
      "tag": "div",
      "attrs": {
        "v-if": "fixed && placeholder",
        "style": "height: {{ height }}px;"
      }
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { useChildren } from '../common/relation';\nimport { getRect } from '../common/utils';\n\ntype TrivialInstance = WechatMiniprogram.Component.TrivialInstance;\n\nVantComponent({\n  relation: useChildren('tabbar-item', function () {\n    this.updateChildren();\n  }),\n\n  props: {\n    active: {\n      type: null,\n      observer: 'updateChildren',\n    },\n    activeColor: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    inactiveColor: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    fixed: {\n      type: Boolean,\n      value: true,\n      observer: 'setHeight',\n    },\n    placeholder: {\n      type: Boolean,\n      observer: 'setHeight',\n    },\n    border: {\n      type: Boolean,\n      value: true,\n    },\n    zIndex: {\n      type: Number,\n      value: 1,\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true,\n    },\n  },\n\n  data: {\n    height: 50,\n  },\n\n  methods: {\n    updateChildren() {\n      const { children } = this;\n      if (!Array.isArray(children) || !children.length) {\n        return;\n      }\n\n      children.forEach((child: TrivialInstance) => child.updateFromParent());\n    },\n\n    setHeight() {\n      if (!this.data.fixed || !this.data.placeholder) {\n        return;\n      }\n\n      wx.nextTick(() => {\n        getRect(this, '.van-tabbar').then((res) => {\n          this.setData({ height: res.height });\n        });\n      });\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { useChildren } from '../common/relation';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { getRect } from '../common/utils';"
      },
      {
        "kind": "TypeAliasDeclaration",
        "text": "type TrivialInstance = WechatMiniprogram.Component.TrivialInstance;",
        "name": "TrivialInstance"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  relation: useChildren('tabbar-item', function () {\n    this.updateChildren();\n  }),\n\n  props: {\n    active: {\n      type: null,\n      observer: 'updateChildren',\n    },\n    activeColor: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    inactiveColor: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    fixed: {\n      type: Boolean,\n      value: true,\n      observer: 'setHeight',\n    },\n    placeholder: {\n      type: Boolean,\n      observer: 'setHeight',\n    },\n    border: {\n      type: Boolean,\n      value: true,\n    },\n    zIndex: {\n      type: Number,\n      value: 1,\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true,\n    },\n  },\n\n  data: {\n    height: 50,\n  },\n\n  methods: {\n    updateChildren() {\n      const { children } = this;\n      if (!Array.isArray(children) || !children.length) {\n        return;\n      }\n\n      children.forEach((child: TrivialInstance) => child.updateFromParent());\n    },\n\n    setHeight() {\n      if (!this.data.fixed || !this.data.placeholder) {\n        return;\n      }\n\n      wx.nextTick(() => {\n        getRect(this, '.van-tabbar').then((res) => {\n          this.setData({ height: res.height });\n        });\n      });\n    },\n  },\n});",
        "expression": "VantComponent({\n  relation: useChildren('tabbar-item', function () {\n    this.updateChildren();\n  }),\n\n  props: {\n    active: {\n      type: null,\n      observer: 'updateChildren',\n    },\n    activeColor: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    inactiveColor: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    fixed: {\n      type: Boolean,\n      value: true,\n      observer: 'setHeight',\n    },\n    placeholder: {\n      type: Boolean,\n      observer: 'setHeight',\n    },\n    border: {\n      type: Boolean,\n      value: true,\n    },\n    zIndex: {\n      type: Number,\n      value: 1,\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true,\n    },\n  },\n\n  data: {\n    height: 50,\n  },\n\n  methods: {\n    updateChildren() {\n      const { children } = this;\n      if (!Array.isArray(children) || !children.length) {\n        return;\n      }\n\n      children.forEach((child: TrivialInstance) => child.updateFromParent());\n    },\n\n    setHeight() {\n      if (!this.data.fixed || !this.data.placeholder) {\n        return;\n      }\n\n      wx.nextTick(() => {\n        getRect(this, '.van-tabbar').then((res) => {\n          this.setData({ height: res.height });\n        });\n      });\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "relation": "useChildren('tabbar-item', function () {\n    this.updateChildren();\n  })",
            "props": {
              "active": {
                "type": "null",
                "observer": "updateChildren"
              },
              "activeColor": {
                "type": "String",
                "observer": "updateChildren"
              },
              "inactiveColor": {
                "type": "String",
                "observer": "updateChildren"
              },
              "fixed": {
                "type": "Boolean",
                "value": "true",
                "observer": "setHeight"
              },
              "placeholder": {
                "type": "Boolean",
                "observer": "setHeight"
              },
              "border": {
                "type": "Boolean",
                "value": "true"
              },
              "zIndex": {
                "type": "Number",
                "value": "1"
              },
              "safeAreaInsetBottom": {
                "type": "Boolean",
                "value": "true"
              }
            },
            "data": {
              "height": "50"
            },
            "methods": {
              "updateChildren": "updateChildren() {\n      const { children } = this;\n      if (!Array.isArray(children) || !children.length) {\n        return;\n      }\n\n      children.forEach((child: TrivialInstance) => child.updateFromParent());\n    }",
              "setHeight": "setHeight() {\n      if (!this.data.fixed || !this.data.placeholder) {\n        return;\n      }\n\n      wx.nextTick(() => {\n        getRect(this, '.van-tabbar').then((res) => {\n          this.setData({ height: res.height });\n        });\n      });\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": null,
  "wxss": ".van-tabbar{background-color:var(--tabbar-background-color,#fff);box-sizing:initial;display:flex;height:var(--tabbar-height,50px);width:100%}.van-tabbar--fixed{bottom:0;left:0;position:fixed}.van-tabbar--safe{padding-bottom:env(safe-area-inset-bottom)}"
}