{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "{{ utils.bem('radio', [direction]) }} custom-class"
      },
      "children": [
        {
          "tag": "div",
          "attrs": {
            "v-if": "labelPosition === 'left'",
            "class": "{{ utils.bem('radio__label', [labelPosition, { disabled: disabled || parentDisabled }]) }} label-class",
            "@tap": "onClickLabel"
          },
          "children": [
            {
              "tag": "slot"
            }
          ]
        },
        {
          "tag": "div",
          "attrs": {
            "class": "van-radio__icon-wrap",
            "style": "font-size: {{ utils.addUnit(iconSize) }}",
            "@tap": "onChange"
          },
          "children": [
            {
              "tag": "slot",
              "attrs": {
                "v-if": "useIconSlot",
                "name": "icon"
              }
            },
            {
              "tag": "van-icon",
              "attrs": {
                "v-else": "",
                "name": "success",
                ":class": "utils.bem('radio__icon', [shape, { disabled: disabled || parentDisabled, checked: value === name }])",
                ":style": "iconStyle",
                "custom-class": "icon-class",
                ":custom-style": "iconCustomStyle"
              }
            }
          ]
        },
        {
          "tag": "div",
          "attrs": {
            "v-if": "labelPosition === 'right'",
            "class": "label-class {{ utils.bem('radio__label', [labelPosition, { disabled: disabled || parentDisabled }]) }}",
            "@tap": "onClickLabel"
          },
          "children": [
            {
              "tag": "slot"
            }
          ]
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { canIUseModel } from '../common/version';\nimport { VantComponent } from '../common/component';\nimport { useParent } from '../common/relation';\n\nVantComponent({\n  field: true,\n\n  relation: useParent('radio-group', function () {\n    this.updateFromParent();\n  }),\n\n  classes: ['icon-class', 'label-class'],\n\n  props: {\n    name: null,\n    value: null,\n    disabled: Boolean,\n    useIconSlot: Boolean,\n    checkedColor: String,\n    labelPosition: {\n      type: String,\n      value: 'right',\n    },\n    labelDisabled: Boolean,\n    shape: {\n      type: String,\n      value: 'round',\n    },\n    iconSize: {\n      type: null,\n      value: 20,\n    },\n  },\n\n  data: {\n    direction: '',\n    parentDisabled: false,\n  },\n\n  methods: {\n    updateFromParent() {\n      if (!this.parent) {\n        return;\n      }\n\n      const { value, disabled: parentDisabled, direction } = this.parent.data;\n\n      this.setData({\n        value,\n        direction,\n        parentDisabled,\n      });\n    },\n\n    emitChange(value: boolean) {\n      const instance = this.parent || this;\n      instance.$emit('input', value);\n      instance.$emit('change', value);\n\n      if (canIUseModel()) {\n        instance.setData({ value });\n      }\n    },\n\n    onChange() {\n      if (!this.data.disabled && !this.data.parentDisabled) {\n        this.emitChange(this.data.name);\n      }\n    },\n\n    onClickLabel() {\n      const { disabled, parentDisabled, labelDisabled, name } = this.data;\n      if (!(disabled || parentDisabled) && !labelDisabled) {\n        this.emitChange(name);\n      }\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { canIUseModel } from '../common/version';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { useParent } from '../common/relation';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  field: true,\n\n  relation: useParent('radio-group', function () {\n    this.updateFromParent();\n  }),\n\n  classes: ['icon-class', 'label-class'],\n\n  props: {\n    name: null,\n    value: null,\n    disabled: Boolean,\n    useIconSlot: Boolean,\n    checkedColor: String,\n    labelPosition: {\n      type: String,\n      value: 'right',\n    },\n    labelDisabled: Boolean,\n    shape: {\n      type: String,\n      value: 'round',\n    },\n    iconSize: {\n      type: null,\n      value: 20,\n    },\n  },\n\n  data: {\n    direction: '',\n    parentDisabled: false,\n  },\n\n  methods: {\n    updateFromParent() {\n      if (!this.parent) {\n        return;\n      }\n\n      const { value, disabled: parentDisabled, direction } = this.parent.data;\n\n      this.setData({\n        value,\n        direction,\n        parentDisabled,\n      });\n    },\n\n    emitChange(value: boolean) {\n      const instance = this.parent || this;\n      instance.$emit('input', value);\n      instance.$emit('change', value);\n\n      if (canIUseModel()) {\n        instance.setData({ value });\n      }\n    },\n\n    onChange() {\n      if (!this.data.disabled && !this.data.parentDisabled) {\n        this.emitChange(this.data.name);\n      }\n    },\n\n    onClickLabel() {\n      const { disabled, parentDisabled, labelDisabled, name } = this.data;\n      if (!(disabled || parentDisabled) && !labelDisabled) {\n        this.emitChange(name);\n      }\n    },\n  },\n});",
        "expression": "VantComponent({\n  field: true,\n\n  relation: useParent('radio-group', function () {\n    this.updateFromParent();\n  }),\n\n  classes: ['icon-class', 'label-class'],\n\n  props: {\n    name: null,\n    value: null,\n    disabled: Boolean,\n    useIconSlot: Boolean,\n    checkedColor: String,\n    labelPosition: {\n      type: String,\n      value: 'right',\n    },\n    labelDisabled: Boolean,\n    shape: {\n      type: String,\n      value: 'round',\n    },\n    iconSize: {\n      type: null,\n      value: 20,\n    },\n  },\n\n  data: {\n    direction: '',\n    parentDisabled: false,\n  },\n\n  methods: {\n    updateFromParent() {\n      if (!this.parent) {\n        return;\n      }\n\n      const { value, disabled: parentDisabled, direction } = this.parent.data;\n\n      this.setData({\n        value,\n        direction,\n        parentDisabled,\n      });\n    },\n\n    emitChange(value: boolean) {\n      const instance = this.parent || this;\n      instance.$emit('input', value);\n      instance.$emit('change', value);\n\n      if (canIUseModel()) {\n        instance.setData({ value });\n      }\n    },\n\n    onChange() {\n      if (!this.data.disabled && !this.data.parentDisabled) {\n        this.emitChange(this.data.name);\n      }\n    },\n\n    onClickLabel() {\n      const { disabled, parentDisabled, labelDisabled, name } = this.data;\n      if (!(disabled || parentDisabled) && !labelDisabled) {\n        this.emitChange(name);\n      }\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "field": "true",
            "relation": "useParent('radio-group', function () {\n    this.updateFromParent();\n  })",
            "classes": [
              "'icon-class'",
              "'label-class'"
            ],
            "props": {
              "name": "null",
              "value": "null",
              "disabled": "Boolean",
              "useIconSlot": "Boolean",
              "checkedColor": "String",
              "labelPosition": {
                "type": "String",
                "value": "right"
              },
              "labelDisabled": "Boolean",
              "shape": {
                "type": "String",
                "value": "round"
              },
              "iconSize": {
                "type": "null",
                "value": "20"
              }
            },
            "data": {
              "direction": "",
              "parentDisabled": "false"
            },
            "methods": {
              "updateFromParent": "updateFromParent() {\n      if (!this.parent) {\n        return;\n      }\n\n      const { value, disabled: parentDisabled, direction } = this.parent.data;\n\n      this.setData({\n        value,\n        direction,\n        parentDisabled,\n      });\n    }",
              "emitChange": "emitChange(value: boolean) {\n      const instance = this.parent || this;\n      instance.$emit('input', value);\n      instance.$emit('change', value);\n\n      if (canIUseModel()) {\n        instance.setData({ value });\n      }\n    }",
              "onChange": "onChange() {\n      if (!this.data.disabled && !this.data.parentDisabled) {\n        this.emitChange(this.data.name);\n      }\n    }",
              "onClickLabel": "onClickLabel() {\n      const { disabled, parentDisabled, labelDisabled, name } = this.data;\n      if (!(disabled || parentDisabled) && !labelDisabled) {\n        this.emitChange(name);\n      }\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "var style = require('../wxs/style.wxs');\nvar addUnit = require('../wxs/add-unit.wxs');\n\nfunction iconStyle(data) {\n  var styles = {\n    'font-size': addUnit(data.iconSize),\n  };\n\n  if (\n    data.checkedColor &&\n    !(data.disabled || data.parentDisabled) &&\n    data.value === data.name\n  ) {\n    styles['border-color'] = data.checkedColor;\n    styles['background-color'] = data.checkedColor;\n  }\n\n  return style(styles);\n}\n\nfunction iconCustomStyle(data) {\n  return style({\n    'line-height': addUnit(data.iconSize),\n    'font-size': '.8em',\n    display: 'block',\n  });\n}\n\nmodule.exports = {\n  iconStyle: iconStyle,\n  iconCustomStyle: iconCustomStyle,\n};\n",
    "statements": [
      {
        "kind": "FirstStatement",
        "text": "var style = require('../wxs/style.wxs');"
      },
      {
        "kind": "FirstStatement",
        "text": "var addUnit = require('../wxs/add-unit.wxs');"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function iconStyle(data) {\n  var styles = {\n    'font-size': addUnit(data.iconSize),\n  };\n\n  if (\n    data.checkedColor &&\n    !(data.disabled || data.parentDisabled) &&\n    data.value === data.name\n  ) {\n    styles['border-color'] = data.checkedColor;\n    styles['background-color'] = data.checkedColor;\n  }\n\n  return style(styles);\n}",
        "name": "iconStyle"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function iconCustomStyle(data) {\n  return style({\n    'line-height': addUnit(data.iconSize),\n    'font-size': '.8em',\n    display: 'block',\n  });\n}",
        "name": "iconCustomStyle"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  iconStyle: iconStyle,\n  iconCustomStyle: iconCustomStyle,\n};",
        "expression": "module.exports = {\n  iconStyle: iconStyle,\n  iconCustomStyle: iconCustomStyle,\n}"
      }
    ]
  },
  "wxss": ".van-radio{align-items:center;display:flex;overflow:hidden;-webkit-user-select:none;user-select:none}.van-radio__icon-wrap{flex:none}.van-radio--horizontal{margin-right:var(--padding-sm,12px)}.van-radio__icon{align-items:center;border:1px solid var(--radio-border-color,#c8c9cc);box-sizing:border-box;color:transparent;display:flex;font-size:var(--radio-size,20px);height:1em;justify-content:center;text-align:center;transition-duration:var(--radio-transition-duration,.2s);transition-property:color,border-color,background-color;width:1em}.van-radio__icon--round{border-radius:100%}.van-radio__icon--checked{background-color:var(--radio-checked-icon-color,#1989fa);border-color:var(--radio-checked-icon-color,#1989fa);color:#fff}.van-radio__icon--disabled{background-color:var(--radio-disabled-background-color,#ebedf0);border-color:var(--radio-disabled-icon-color,#c8c9cc)}.van-radio__icon--disabled.van-radio__icon--checked{color:var(--radio-disabled-icon-color,#c8c9cc)}.van-radio__label{word-wrap:break-word;color:var(--radio-label-color,#323233);line-height:var(--radio-size,20px);padding-left:var(--radio-label-margin,10px)}.van-radio__label--left{float:left;margin:0 var(--radio-label-margin,10px) 0 0}.van-radio__label--disabled{color:var(--radio-disabled-label-color,#c8c9cc)}.van-radio__label:empty{margin:0}"
}