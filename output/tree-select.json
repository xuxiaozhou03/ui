{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "van-tree-select",
        "style": "height: {{ utils.addUnit(height) }}"
      },
      "children": [
        {
          "tag": "scroll-view",
          "attrs": {
            "scroll-y": "",
            "class": "van-tree-select__nav"
          },
          "children": [
            {
              "tag": "van-sidebar",
              "attrs": {
                ":active-key": "mainActiveIndex",
                "@change": "onClickNav",
                "custom-class": "van-tree-select__nav__inner"
              },
              "children": [
                {
                  "tag": "van-sidebar-item",
                  "attrs": {
                    "v-for": "items",
                    ":key": "index",
                    ":custom-class": "cn( mainItemClass)",
                    ":active-class": "cn( mainActiveClass)",
                    ":disabled-class": "cn( mainDisabledClass)",
                    ":badge": "item.badge",
                    ":dot": "item.dot",
                    ":title": "item.text",
                    ":disabled": "item.disabled"
                  }
                }
              ]
            }
          ]
        },
        {
          "tag": "scroll-view",
          "attrs": {
            "scroll-y": "",
            "class": "van-tree-select__content"
          },
          "children": [
            {
              "tag": "slot",
              "attrs": {
                "name": "content"
              }
            },
            {
              "tag": "div",
              "attrs": {
                "v-for": "subItems",
                ":key": "id",
                "class": "van-ellipsis content-item-class {{ utils.bem('tree-select__item', { active: wxs.isActive(activeId, item.id), disabled: item.disabled }) }} {{ wxs.isActive(activeId, item.id) ? 'content-active-class' : '' }} {{ item.disabled ? 'content-disabled-class' : '' }}",
                ":data-item": "item",
                "@tap": "onSelectItem"
              },
              "children": [
                {
                  "tag": "van-icon",
                  "attrs": {
                    "v-if": "wxs.isActive(activeId, item.id)",
                    ":name": "selectedIcon",
                    "size": "16px",
                    "class": "van-tree-select__selected"
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\n\nVantComponent({\n  classes: [\n    'main-item-class',\n    'content-item-class',\n    'main-active-class',\n    'content-active-class',\n    'main-disabled-class',\n    'content-disabled-class',\n  ],\n\n  props: {\n    items: {\n      type: Array,\n      observer: 'updateSubItems',\n    },\n    activeId: null,\n    mainActiveIndex: {\n      type: Number,\n      value: 0,\n      observer: 'updateSubItems',\n    },\n    height: {\n      type: null,\n      value: 300,\n    },\n    max: {\n      type: Number,\n      value: Infinity,\n    },\n    selectedIcon: {\n      type: String,\n      value: 'success',\n    },\n  },\n\n  data: {\n    subItems: [],\n  },\n\n  methods: {\n    // 当一个子项被选择时\n    onSelectItem(event: WechatMiniprogram.TouchEvent) {\n      const { item } = event.currentTarget.dataset;\n      const isArray = Array.isArray(this.data.activeId);\n      // 判断有没有超出右侧选择的最大数\n      const isOverMax = isArray && this.data.activeId.length >= this.data.max;\n      // 判断该项有没有被选中, 如果有被选中，则忽视是否超出的条件\n      const isSelected = isArray\n        ? this.data.activeId.indexOf(item.id) > -1\n        : this.data.activeId === item.id;\n\n      if (!item.disabled && (!isOverMax || isSelected)) {\n        this.$emit('click-item', item);\n      }\n    },\n\n    // 当一个导航被点击时\n    onClickNav(event: WechatMiniprogram.CustomEvent) {\n      const index = (event.detail as unknown) as number;\n      const item = this.data.items[index];\n      if (!item.disabled) {\n        this.$emit('click-nav', { index });\n      }\n    },\n\n    // 更新子项列表\n    updateSubItems() {\n      const { items, mainActiveIndex } = this.data;\n      const { children = [] } = items[mainActiveIndex] || {};\n\n      this.setData({ subItems: children });\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  classes: [\n    'main-item-class',\n    'content-item-class',\n    'main-active-class',\n    'content-active-class',\n    'main-disabled-class',\n    'content-disabled-class',\n  ],\n\n  props: {\n    items: {\n      type: Array,\n      observer: 'updateSubItems',\n    },\n    activeId: null,\n    mainActiveIndex: {\n      type: Number,\n      value: 0,\n      observer: 'updateSubItems',\n    },\n    height: {\n      type: null,\n      value: 300,\n    },\n    max: {\n      type: Number,\n      value: Infinity,\n    },\n    selectedIcon: {\n      type: String,\n      value: 'success',\n    },\n  },\n\n  data: {\n    subItems: [],\n  },\n\n  methods: {\n    // 当一个子项被选择时\n    onSelectItem(event: WechatMiniprogram.TouchEvent) {\n      const { item } = event.currentTarget.dataset;\n      const isArray = Array.isArray(this.data.activeId);\n      // 判断有没有超出右侧选择的最大数\n      const isOverMax = isArray && this.data.activeId.length >= this.data.max;\n      // 判断该项有没有被选中, 如果有被选中，则忽视是否超出的条件\n      const isSelected = isArray\n        ? this.data.activeId.indexOf(item.id) > -1\n        : this.data.activeId === item.id;\n\n      if (!item.disabled && (!isOverMax || isSelected)) {\n        this.$emit('click-item', item);\n      }\n    },\n\n    // 当一个导航被点击时\n    onClickNav(event: WechatMiniprogram.CustomEvent) {\n      const index = (event.detail as unknown) as number;\n      const item = this.data.items[index];\n      if (!item.disabled) {\n        this.$emit('click-nav', { index });\n      }\n    },\n\n    // 更新子项列表\n    updateSubItems() {\n      const { items, mainActiveIndex } = this.data;\n      const { children = [] } = items[mainActiveIndex] || {};\n\n      this.setData({ subItems: children });\n    },\n  },\n});",
        "expression": "VantComponent({\n  classes: [\n    'main-item-class',\n    'content-item-class',\n    'main-active-class',\n    'content-active-class',\n    'main-disabled-class',\n    'content-disabled-class',\n  ],\n\n  props: {\n    items: {\n      type: Array,\n      observer: 'updateSubItems',\n    },\n    activeId: null,\n    mainActiveIndex: {\n      type: Number,\n      value: 0,\n      observer: 'updateSubItems',\n    },\n    height: {\n      type: null,\n      value: 300,\n    },\n    max: {\n      type: Number,\n      value: Infinity,\n    },\n    selectedIcon: {\n      type: String,\n      value: 'success',\n    },\n  },\n\n  data: {\n    subItems: [],\n  },\n\n  methods: {\n    // 当一个子项被选择时\n    onSelectItem(event: WechatMiniprogram.TouchEvent) {\n      const { item } = event.currentTarget.dataset;\n      const isArray = Array.isArray(this.data.activeId);\n      // 判断有没有超出右侧选择的最大数\n      const isOverMax = isArray && this.data.activeId.length >= this.data.max;\n      // 判断该项有没有被选中, 如果有被选中，则忽视是否超出的条件\n      const isSelected = isArray\n        ? this.data.activeId.indexOf(item.id) > -1\n        : this.data.activeId === item.id;\n\n      if (!item.disabled && (!isOverMax || isSelected)) {\n        this.$emit('click-item', item);\n      }\n    },\n\n    // 当一个导航被点击时\n    onClickNav(event: WechatMiniprogram.CustomEvent) {\n      const index = (event.detail as unknown) as number;\n      const item = this.data.items[index];\n      if (!item.disabled) {\n        this.$emit('click-nav', { index });\n      }\n    },\n\n    // 更新子项列表\n    updateSubItems() {\n      const { items, mainActiveIndex } = this.data;\n      const { children = [] } = items[mainActiveIndex] || {};\n\n      this.setData({ subItems: children });\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "classes": [
              "'main-item-class'",
              "'content-item-class'",
              "'main-active-class'",
              "'content-active-class'",
              "'main-disabled-class'",
              "'content-disabled-class'"
            ],
            "props": {
              "items": {
                "type": "Array",
                "observer": "updateSubItems"
              },
              "activeId": "null",
              "mainActiveIndex": {
                "type": "Number",
                "value": "0",
                "observer": "updateSubItems"
              },
              "height": {
                "type": "null",
                "value": "300"
              },
              "max": {
                "type": "Number",
                "value": "Infinity"
              },
              "selectedIcon": {
                "type": "String",
                "value": "success"
              }
            },
            "data": {
              "subItems": []
            },
            "methods": {
              "onSelectItem": "onSelectItem(event: WechatMiniprogram.TouchEvent) {\n      const { item } = event.currentTarget.dataset;\n      const isArray = Array.isArray(this.data.activeId);\n      // 判断有没有超出右侧选择的最大数\n      const isOverMax = isArray && this.data.activeId.length >= this.data.max;\n      // 判断该项有没有被选中, 如果有被选中，则忽视是否超出的条件\n      const isSelected = isArray\n        ? this.data.activeId.indexOf(item.id) > -1\n        : this.data.activeId === item.id;\n\n      if (!item.disabled && (!isOverMax || isSelected)) {\n        this.$emit('click-item', item);\n      }\n    }",
              "onClickNav": "onClickNav(event: WechatMiniprogram.CustomEvent) {\n      const index = (event.detail as unknown) as number;\n      const item = this.data.items[index];\n      if (!item.disabled) {\n        this.$emit('click-nav', { index });\n      }\n    }",
              "updateSubItems": "updateSubItems() {\n      const { items, mainActiveIndex } = this.data;\n      const { children = [] } = items[mainActiveIndex] || {};\n\n      this.setData({ subItems: children });\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "var array = require('../wxs/array.wxs');\n\nfunction isActive (activeList, itemId) {\n  if (array.isArray(activeList)) {\n    return activeList.indexOf(itemId) > -1;\n  }\n\n  return activeList === itemId;\n}\n\nmodule.exports.isActive = isActive;\n",
    "statements": [
      {
        "kind": "FirstStatement",
        "text": "var array = require('../wxs/array.wxs');"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function isActive (activeList, itemId) {\n  if (array.isArray(activeList)) {\n    return activeList.indexOf(itemId) > -1;\n  }\n\n  return activeList === itemId;\n}",
        "name": "isActive"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports.isActive = isActive;",
        "expression": "module.exports.isActive = isActive"
      }
    ]
  },
  "wxss": ".van-tree-select{display:flex;font-size:var(--tree-select-font-size,14px);position:relative;-webkit-user-select:none;user-select:none}.van-tree-select__nav{--sidebar-padding:12px 8px 12px 12px;background-color:var(--tree-select-nav-background-color,#f7f8fa);flex:1}.van-tree-select__nav__inner{height:100%;width:100%!important}.van-tree-select__content{background-color:var(--tree-select-content-background-color,#fff);flex:2}.van-tree-select__item{font-weight:700;line-height:var(--tree-select-item-height,44px);padding:0 32px 0 var(--padding-md,16px);position:relative}.van-tree-select__item--active{color:var(--tree-select-item-active-color,#ee0a24)}.van-tree-select__item--disabled{color:var(--tree-select-item-disabled-color,#c8c9cc)}.van-tree-select__selected{position:absolute;right:var(--padding-md,16px);top:50%;transform:translateY(-50%)}"
}