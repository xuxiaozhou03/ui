{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "{{ utils.bem('sidebar-item', { selected, disabled }) }} {{ selected ? 'active-class' : '' }} {{ disabled ? 'disabled-class' : '' }} custom-class",
        "hover-class": "van-sidebar-item--hover",
        "hover-stay-time": "70",
        "@tap": "onClick"
      },
      "children": [
        {
          "tag": "div",
          "attrs": {
            "class": "van-sidebar-item__text"
          },
          "children": [
            {
              "tag": "van-info",
              "attrs": {
                "v-if": "badge != null || info !== null || dot",
                ":dot": "dot",
                ":info": "badge != null ? badge : info"
              }
            },
            {
              "tag": "div",
              "attrs": {
                "v-if": "title"
              }
            },
            {
              "tag": "slot",
              "attrs": {
                "v-else": "",
                "name": "title"
              }
            }
          ]
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { useParent } from '../common/relation';\n\nVantComponent({\n  classes: ['active-class', 'disabled-class'],\n\n  relation: useParent('sidebar'),\n\n  props: {\n    dot: Boolean,\n    badge: null,\n    info: null,\n    title: String,\n    disabled: Boolean,\n  },\n\n  methods: {\n    onClick() {\n      const { parent } = this;\n\n      if (!parent || this.data.disabled) {\n        return;\n      }\n\n      const index = parent.children.indexOf(this);\n\n      parent.setActive(index).then(() => {\n        this.$emit('click', index);\n        parent.$emit('change', index);\n      });\n    },\n\n    setActive(selected: boolean) {\n      return this.setData({ selected });\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { useParent } from '../common/relation';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  classes: ['active-class', 'disabled-class'],\n\n  relation: useParent('sidebar'),\n\n  props: {\n    dot: Boolean,\n    badge: null,\n    info: null,\n    title: String,\n    disabled: Boolean,\n  },\n\n  methods: {\n    onClick() {\n      const { parent } = this;\n\n      if (!parent || this.data.disabled) {\n        return;\n      }\n\n      const index = parent.children.indexOf(this);\n\n      parent.setActive(index).then(() => {\n        this.$emit('click', index);\n        parent.$emit('change', index);\n      });\n    },\n\n    setActive(selected: boolean) {\n      return this.setData({ selected });\n    },\n  },\n});",
        "expression": "VantComponent({\n  classes: ['active-class', 'disabled-class'],\n\n  relation: useParent('sidebar'),\n\n  props: {\n    dot: Boolean,\n    badge: null,\n    info: null,\n    title: String,\n    disabled: Boolean,\n  },\n\n  methods: {\n    onClick() {\n      const { parent } = this;\n\n      if (!parent || this.data.disabled) {\n        return;\n      }\n\n      const index = parent.children.indexOf(this);\n\n      parent.setActive(index).then(() => {\n        this.$emit('click', index);\n        parent.$emit('change', index);\n      });\n    },\n\n    setActive(selected: boolean) {\n      return this.setData({ selected });\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "classes": [
              "'active-class'",
              "'disabled-class'"
            ],
            "relation": "useParent('sidebar')",
            "props": {
              "dot": "Boolean",
              "badge": "null",
              "info": "null",
              "title": "String",
              "disabled": "Boolean"
            },
            "methods": {
              "onClick": "onClick() {\n      const { parent } = this;\n\n      if (!parent || this.data.disabled) {\n        return;\n      }\n\n      const index = parent.children.indexOf(this);\n\n      parent.setActive(index).then(() => {\n        this.$emit('click', index);\n        parent.$emit('change', index);\n      });\n    }",
              "setActive": "setActive(selected: boolean) {\n      return this.setData({ selected });\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": null,
  "wxss": ".van-sidebar-item{background-color:var(--sidebar-background-color,#f7f8fa);border-left:3px solid transparent;box-sizing:border-box;color:var(--sidebar-text-color,#323233);display:block;font-size:var(--sidebar-font-size,14px);line-height:var(--sidebar-line-height,20px);overflow:hidden;padding:var(--sidebar-padding,20px 12px 20px 8px);-webkit-user-select:none;user-select:none}.van-sidebar-item__text{display:inline-block;position:relative;word-break:break-all}.van-sidebar-item--hover:not(.van-sidebar-item--disabled){background-color:var(--sidebar-active-color,#f2f3f5)}.van-sidebar-item:after{border-bottom-width:1px}.van-sidebar-item--selected{border-color:var(--sidebar-selected-border-color,#ee0a24);color:var(--sidebar-selected-text-color,#323233);font-weight:var(--sidebar-selected-font-weight,500)}.van-sidebar-item--selected:after{border-right-width:1px}.van-sidebar-item--selected,.van-sidebar-item--selected.van-sidebar-item--hover{background-color:var(--sidebar-selected-background-color,#fff)}.van-sidebar-item--disabled{color:var(--sidebar-disabled-text-color,#c8c9cc)}"
}