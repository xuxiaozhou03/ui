{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "van-dropdown-menu van-dropdown-menu--top-bottom custom-class"
      },
      "children": [
        {
          "tag": "div",
          "attrs": {
            "v-for": "itemListData",
            ":key": "index",
            ":data-index": "index",
            ":class": "utils.bem('dropdown-menu__item', { disabled: item.disabled })",
            "@tap": "onTitleTap"
          },
          "children": [
            {
              "tag": "div",
              "attrs": {
                "class": "{{ item.titleClass }} {{ utils.bem('dropdown-menu__title', { active: item.showPopup, down: item.showPopup === (direction === 'down') }) }} title-class",
                ":style": "item.showPopup ? 'color:' + activeColor : ''"
              },
              "children": [
                {
                  "tag": "div",
                  "attrs": {
                    "class": "van-ellipsis"
                  }
                }
              ]
            }
          ]
        },
        {
          "tag": "slot"
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { useChildren } from '../common/relation';\nimport { addUnit, getRect, getSystemInfoSync } from '../common/utils';\n\nlet ARRAY: WechatMiniprogram.Component.TrivialInstance[] = [];\n\nVantComponent({\n  field: true,\n  classes: ['title-class'],\n\n  relation: useChildren('dropdown-item', function () {\n    this.updateItemListData();\n  }),\n\n  props: {\n    activeColor: {\n      type: String,\n      observer: 'updateChildrenData',\n    },\n    overlay: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildrenData',\n    },\n    zIndex: {\n      type: Number,\n      value: 10,\n    },\n    duration: {\n      type: Number,\n      value: 200,\n      observer: 'updateChildrenData',\n    },\n    direction: {\n      type: String,\n      value: 'down',\n      observer: 'updateChildrenData',\n    },\n    safeAreaTabBar: {\n      type: Boolean,\n      value: false,\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildrenData',\n    },\n    closeOnClickOutside: {\n      type: Boolean,\n      value: true,\n    },\n  },\n\n  data: {\n    itemListData: [] as Record<string, unknown>[],\n  },\n\n  beforeCreate() {\n    const { windowHeight } = getSystemInfoSync();\n    this.windowHeight = windowHeight;\n    ARRAY.push(this);\n  },\n\n  destroyed() {\n    ARRAY = ARRAY.filter((item) => item !== this);\n  },\n\n  methods: {\n    updateItemListData() {\n      this.setData({\n        itemListData: this.children.map((child) => child.data),\n      });\n    },\n\n    updateChildrenData() {\n      this.children.forEach((child) => {\n        child.updateDataFromParent();\n      });\n    },\n\n    toggleItem(active: number) {\n      this.children.forEach((item, index) => {\n        const { showPopup } = item.data;\n        if (index === active) {\n          item.toggle();\n        } else if (showPopup) {\n          item.toggle(false, { immediate: true });\n        }\n      });\n    },\n\n    close() {\n      this.children.forEach((child) => {\n        child.toggle(false, { immediate: true });\n      });\n    },\n\n    getChildWrapperStyle() {\n      const { zIndex, direction } = this.data;\n\n      return getRect(this, '.van-dropdown-menu').then((rect) => {\n        const { top = 0, bottom = 0 } = rect;\n        const offset = direction === 'down' ? bottom : this.windowHeight - top;\n\n        let wrapperStyle = `z-index: ${zIndex};`;\n\n        if (direction === 'down') {\n          wrapperStyle += `top: ${addUnit(offset)};`;\n        } else {\n          wrapperStyle += `bottom: ${addUnit(offset)};`;\n        }\n\n        return wrapperStyle;\n      });\n    },\n\n    onTitleTap(event: WechatMiniprogram.TouchEvent) {\n      const { index } = event.currentTarget.dataset;\n      const child = this.children[index];\n\n      if (!child.data.disabled) {\n        ARRAY.forEach((menuItem) => {\n          if (\n            menuItem &&\n            menuItem.data.closeOnClickOutside &&\n            menuItem !== this\n          ) {\n            menuItem.close();\n          }\n        });\n\n        this.toggleItem(index);\n      }\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { useChildren } from '../common/relation';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { addUnit, getRect, getSystemInfoSync } from '../common/utils';"
      },
      {
        "kind": "FirstStatement",
        "text": "let ARRAY: WechatMiniprogram.Component.TrivialInstance[] = [];"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  field: true,\n  classes: ['title-class'],\n\n  relation: useChildren('dropdown-item', function () {\n    this.updateItemListData();\n  }),\n\n  props: {\n    activeColor: {\n      type: String,\n      observer: 'updateChildrenData',\n    },\n    overlay: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildrenData',\n    },\n    zIndex: {\n      type: Number,\n      value: 10,\n    },\n    duration: {\n      type: Number,\n      value: 200,\n      observer: 'updateChildrenData',\n    },\n    direction: {\n      type: String,\n      value: 'down',\n      observer: 'updateChildrenData',\n    },\n    safeAreaTabBar: {\n      type: Boolean,\n      value: false,\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildrenData',\n    },\n    closeOnClickOutside: {\n      type: Boolean,\n      value: true,\n    },\n  },\n\n  data: {\n    itemListData: [] as Record<string, unknown>[],\n  },\n\n  beforeCreate() {\n    const { windowHeight } = getSystemInfoSync();\n    this.windowHeight = windowHeight;\n    ARRAY.push(this);\n  },\n\n  destroyed() {\n    ARRAY = ARRAY.filter((item) => item !== this);\n  },\n\n  methods: {\n    updateItemListData() {\n      this.setData({\n        itemListData: this.children.map((child) => child.data),\n      });\n    },\n\n    updateChildrenData() {\n      this.children.forEach((child) => {\n        child.updateDataFromParent();\n      });\n    },\n\n    toggleItem(active: number) {\n      this.children.forEach((item, index) => {\n        const { showPopup } = item.data;\n        if (index === active) {\n          item.toggle();\n        } else if (showPopup) {\n          item.toggle(false, { immediate: true });\n        }\n      });\n    },\n\n    close() {\n      this.children.forEach((child) => {\n        child.toggle(false, { immediate: true });\n      });\n    },\n\n    getChildWrapperStyle() {\n      const { zIndex, direction } = this.data;\n\n      return getRect(this, '.van-dropdown-menu').then((rect) => {\n        const { top = 0, bottom = 0 } = rect;\n        const offset = direction === 'down' ? bottom : this.windowHeight - top;\n\n        let wrapperStyle = `z-index: ${zIndex};`;\n\n        if (direction === 'down') {\n          wrapperStyle += `top: ${addUnit(offset)};`;\n        } else {\n          wrapperStyle += `bottom: ${addUnit(offset)};`;\n        }\n\n        return wrapperStyle;\n      });\n    },\n\n    onTitleTap(event: WechatMiniprogram.TouchEvent) {\n      const { index } = event.currentTarget.dataset;\n      const child = this.children[index];\n\n      if (!child.data.disabled) {\n        ARRAY.forEach((menuItem) => {\n          if (\n            menuItem &&\n            menuItem.data.closeOnClickOutside &&\n            menuItem !== this\n          ) {\n            menuItem.close();\n          }\n        });\n\n        this.toggleItem(index);\n      }\n    },\n  },\n});",
        "expression": "VantComponent({\n  field: true,\n  classes: ['title-class'],\n\n  relation: useChildren('dropdown-item', function () {\n    this.updateItemListData();\n  }),\n\n  props: {\n    activeColor: {\n      type: String,\n      observer: 'updateChildrenData',\n    },\n    overlay: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildrenData',\n    },\n    zIndex: {\n      type: Number,\n      value: 10,\n    },\n    duration: {\n      type: Number,\n      value: 200,\n      observer: 'updateChildrenData',\n    },\n    direction: {\n      type: String,\n      value: 'down',\n      observer: 'updateChildrenData',\n    },\n    safeAreaTabBar: {\n      type: Boolean,\n      value: false,\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildrenData',\n    },\n    closeOnClickOutside: {\n      type: Boolean,\n      value: true,\n    },\n  },\n\n  data: {\n    itemListData: [] as Record<string, unknown>[],\n  },\n\n  beforeCreate() {\n    const { windowHeight } = getSystemInfoSync();\n    this.windowHeight = windowHeight;\n    ARRAY.push(this);\n  },\n\n  destroyed() {\n    ARRAY = ARRAY.filter((item) => item !== this);\n  },\n\n  methods: {\n    updateItemListData() {\n      this.setData({\n        itemListData: this.children.map((child) => child.data),\n      });\n    },\n\n    updateChildrenData() {\n      this.children.forEach((child) => {\n        child.updateDataFromParent();\n      });\n    },\n\n    toggleItem(active: number) {\n      this.children.forEach((item, index) => {\n        const { showPopup } = item.data;\n        if (index === active) {\n          item.toggle();\n        } else if (showPopup) {\n          item.toggle(false, { immediate: true });\n        }\n      });\n    },\n\n    close() {\n      this.children.forEach((child) => {\n        child.toggle(false, { immediate: true });\n      });\n    },\n\n    getChildWrapperStyle() {\n      const { zIndex, direction } = this.data;\n\n      return getRect(this, '.van-dropdown-menu').then((rect) => {\n        const { top = 0, bottom = 0 } = rect;\n        const offset = direction === 'down' ? bottom : this.windowHeight - top;\n\n        let wrapperStyle = `z-index: ${zIndex};`;\n\n        if (direction === 'down') {\n          wrapperStyle += `top: ${addUnit(offset)};`;\n        } else {\n          wrapperStyle += `bottom: ${addUnit(offset)};`;\n        }\n\n        return wrapperStyle;\n      });\n    },\n\n    onTitleTap(event: WechatMiniprogram.TouchEvent) {\n      const { index } = event.currentTarget.dataset;\n      const child = this.children[index];\n\n      if (!child.data.disabled) {\n        ARRAY.forEach((menuItem) => {\n          if (\n            menuItem &&\n            menuItem.data.closeOnClickOutside &&\n            menuItem !== this\n          ) {\n            menuItem.close();\n          }\n        });\n\n        this.toggleItem(index);\n      }\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "field": "true",
            "classes": [
              "'title-class'"
            ],
            "relation": "useChildren('dropdown-item', function () {\n    this.updateItemListData();\n  })",
            "props": {
              "activeColor": {
                "type": "String",
                "observer": "updateChildrenData"
              },
              "overlay": {
                "type": "Boolean",
                "value": "true",
                "observer": "updateChildrenData"
              },
              "zIndex": {
                "type": "Number",
                "value": "10"
              },
              "duration": {
                "type": "Number",
                "value": "200",
                "observer": "updateChildrenData"
              },
              "direction": {
                "type": "String",
                "value": "down",
                "observer": "updateChildrenData"
              },
              "safeAreaTabBar": {
                "type": "Boolean",
                "value": "false"
              },
              "closeOnClickOverlay": {
                "type": "Boolean",
                "value": "true",
                "observer": "updateChildrenData"
              },
              "closeOnClickOutside": {
                "type": "Boolean",
                "value": "true"
              }
            },
            "data": {
              "itemListData": "[] as Record<string, unknown>[]"
            },
            "methods": {
              "updateItemListData": "updateItemListData() {\n      this.setData({\n        itemListData: this.children.map((child) => child.data),\n      });\n    }",
              "updateChildrenData": "updateChildrenData() {\n      this.children.forEach((child) => {\n        child.updateDataFromParent();\n      });\n    }",
              "toggleItem": "toggleItem(active: number) {\n      this.children.forEach((item, index) => {\n        const { showPopup } = item.data;\n        if (index === active) {\n          item.toggle();\n        } else if (showPopup) {\n          item.toggle(false, { immediate: true });\n        }\n      });\n    }",
              "close": "close() {\n      this.children.forEach((child) => {\n        child.toggle(false, { immediate: true });\n      });\n    }",
              "getChildWrapperStyle": "getChildWrapperStyle() {\n      const { zIndex, direction } = this.data;\n\n      return getRect(this, '.van-dropdown-menu').then((rect) => {\n        const { top = 0, bottom = 0 } = rect;\n        const offset = direction === 'down' ? bottom : this.windowHeight - top;\n\n        let wrapperStyle = `z-index: ${zIndex};`;\n\n        if (direction === 'down') {\n          wrapperStyle += `top: ${addUnit(offset)};`;\n        } else {\n          wrapperStyle += `bottom: ${addUnit(offset)};`;\n        }\n\n        return wrapperStyle;\n      });\n    }",
              "onTitleTap": "onTitleTap(event: WechatMiniprogram.TouchEvent) {\n      const { index } = event.currentTarget.dataset;\n      const child = this.children[index];\n\n      if (!child.data.disabled) {\n        ARRAY.forEach((menuItem) => {\n          if (\n            menuItem &&\n            menuItem.data.closeOnClickOutside &&\n            menuItem !== this\n          ) {\n            menuItem.close();\n          }\n        });\n\n        this.toggleItem(index);\n      }\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "function displayTitle(item) {\n  if (item.title) {\n    return item.title;\n  }\n\n  var match = item.options.filter(function(option) {\n    return option.value === item.value;\n  });\n  var displayTitle = match.length ? match[0].text : '';\n  return displayTitle;\n}\n\nmodule.exports = {\n  displayTitle: displayTitle\n};\n",
    "statements": [
      {
        "kind": "FunctionDeclaration",
        "text": "function displayTitle(item) {\n  if (item.title) {\n    return item.title;\n  }\n\n  var match = item.options.filter(function(option) {\n    return option.value === item.value;\n  });\n  var displayTitle = match.length ? match[0].text : '';\n  return displayTitle;\n}",
        "name": "displayTitle"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  displayTitle: displayTitle\n};",
        "expression": "module.exports = {\n  displayTitle: displayTitle\n}"
      }
    ]
  },
  "wxss": ".van-dropdown-menu{background-color:var(--dropdown-menu-background-color,#fff);box-shadow:var(--dropdown-menu-box-shadow,0 2px 12px hsla(210,1%,40%,.12));display:flex;height:var(--dropdown-menu-height,50px);-webkit-user-select:none;user-select:none}.van-dropdown-menu__item{align-items:center;display:flex;flex:1;justify-content:center;min-width:0}.van-dropdown-menu__item:active{opacity:.7}.van-dropdown-menu__item--disabled:active{opacity:1}.van-dropdown-menu__item--disabled .van-dropdown-menu__title{color:var(--dropdown-menu-title-disabled-text-color,#969799)}.van-dropdown-menu__title{box-sizing:border-box;color:var(--dropdown-menu-title-text-color,#323233);font-size:var(--dropdown-menu-title-font-size,15px);line-height:var(--dropdown-menu-title-line-height,18px);max-width:100%;padding:var(--dropdown-menu-title-padding,0 24px 0 8px);position:relative}.van-dropdown-menu__title:after{border-color:transparent transparent currentcolor currentcolor;border-style:solid;border-width:3px;content:\"\";margin-top:-5px;opacity:.8;position:absolute;right:11px;top:50%;transform:rotate(-45deg)}.van-dropdown-menu__title--active{color:var(--dropdown-menu-title-active-text-color,#ee0a24)}.van-dropdown-menu__title--down:after{margin-top:-1px;transform:rotate(135deg)}"
}