{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        ":class": "cn('van-row', customClass)",
        ":style": "rootStyle"
      },
      "children": [
        {
          "tag": "slot"
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { useChildren } from '../common/relation';\n\nVantComponent({\n  relation: useChildren('col', function (target) {\n    const { gutter } = this.data;\n\n    if (gutter) {\n      target.setData({ gutter });\n    }\n  }),\n\n  props: {\n    gutter: {\n      type: Number,\n      observer: 'setGutter',\n    },\n  },\n\n  methods: {\n    setGutter() {\n      this.children.forEach((col) => {\n        col.setData(this.data);\n      });\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { useChildren } from '../common/relation';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  relation: useChildren('col', function (target) {\n    const { gutter } = this.data;\n\n    if (gutter) {\n      target.setData({ gutter });\n    }\n  }),\n\n  props: {\n    gutter: {\n      type: Number,\n      observer: 'setGutter',\n    },\n  },\n\n  methods: {\n    setGutter() {\n      this.children.forEach((col) => {\n        col.setData(this.data);\n      });\n    },\n  },\n});",
        "expression": "VantComponent({\n  relation: useChildren('col', function (target) {\n    const { gutter } = this.data;\n\n    if (gutter) {\n      target.setData({ gutter });\n    }\n  }),\n\n  props: {\n    gutter: {\n      type: Number,\n      observer: 'setGutter',\n    },\n  },\n\n  methods: {\n    setGutter() {\n      this.children.forEach((col) => {\n        col.setData(this.data);\n      });\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "relation": "useChildren('col', function (target) {\n    const { gutter } = this.data;\n\n    if (gutter) {\n      target.setData({ gutter });\n    }\n  })",
            "props": {
              "gutter": {
                "type": "Number",
                "observer": "setGutter"
              }
            },
            "methods": {
              "setGutter": "setGutter() {\n      this.children.forEach((col) => {\n        col.setData(this.data);\n      });\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "var style = require('../wxs/style.wxs');\nvar addUnit = require('../wxs/add-unit.wxs');\n\nfunction rootStyle(data) {\n  if (!data.gutter) {\n    return '';\n  }\n\n  return style({\n    'margin-right': addUnit(-data.gutter / 2),\n    'margin-left': addUnit(-data.gutter / 2),\n  });\n}\n\nmodule.exports = {\n  rootStyle: rootStyle,\n};\n",
    "statements": [
      {
        "kind": "FirstStatement",
        "text": "var style = require('../wxs/style.wxs');"
      },
      {
        "kind": "FirstStatement",
        "text": "var addUnit = require('../wxs/add-unit.wxs');"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function rootStyle(data) {\n  if (!data.gutter) {\n    return '';\n  }\n\n  return style({\n    'margin-right': addUnit(-data.gutter / 2),\n    'margin-left': addUnit(-data.gutter / 2),\n  });\n}",
        "name": "rootStyle"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  rootStyle: rootStyle,\n};",
        "expression": "module.exports = {\n  rootStyle: rootStyle,\n}"
      }
    ]
  },
  "wxss": ".van-row:after{clear:both;content:\"\";display:table}"
}