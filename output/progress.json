{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "van-progress custom-class",
        ":style": "rootStyle"
      },
      "children": [
        {
          "tag": "div",
          "attrs": {
            "class": "van-progress__portion",
            ":style": "portionStyle"
          },
          "children": [
            {
              "tag": "div",
              "attrs": {
                "v-if": "showPivot && computed.pivotText(pivotText, percentage)",
                ":style": "pivotStyle",
                "class": "van-progress__pivot"
              }
            }
          ]
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { BLUE } from '../common/color';\nimport { getRect } from '../common/utils';\n\nVantComponent({\n  props: {\n    inactive: Boolean,\n    percentage: {\n      type: Number,\n      observer: 'setLeft',\n    },\n    pivotText: String,\n    pivotColor: String,\n    trackColor: String,\n    showPivot: {\n      type: Boolean,\n      value: true,\n    },\n    color: {\n      type: String,\n      value: BLUE,\n    },\n    textColor: {\n      type: String,\n      value: '#fff',\n    },\n    strokeWidth: {\n      type: null,\n      value: 4,\n    },\n  },\n\n  data: {\n    right: 0,\n  },\n\n  mounted() {\n    this.setLeft();\n  },\n\n  methods: {\n    setLeft() {\n      Promise.all([\n        getRect(this, '.van-progress'),\n        getRect(this, '.van-progress__pivot'),\n      ]).then(([portion, pivot]) => {\n        if (portion && pivot) {\n          this.setData({\n            right: (pivot.width * (this.data.percentage - 100)) / 100,\n          });\n        }\n      });\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { BLUE } from '../common/color';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { getRect } from '../common/utils';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  props: {\n    inactive: Boolean,\n    percentage: {\n      type: Number,\n      observer: 'setLeft',\n    },\n    pivotText: String,\n    pivotColor: String,\n    trackColor: String,\n    showPivot: {\n      type: Boolean,\n      value: true,\n    },\n    color: {\n      type: String,\n      value: BLUE,\n    },\n    textColor: {\n      type: String,\n      value: '#fff',\n    },\n    strokeWidth: {\n      type: null,\n      value: 4,\n    },\n  },\n\n  data: {\n    right: 0,\n  },\n\n  mounted() {\n    this.setLeft();\n  },\n\n  methods: {\n    setLeft() {\n      Promise.all([\n        getRect(this, '.van-progress'),\n        getRect(this, '.van-progress__pivot'),\n      ]).then(([portion, pivot]) => {\n        if (portion && pivot) {\n          this.setData({\n            right: (pivot.width * (this.data.percentage - 100)) / 100,\n          });\n        }\n      });\n    },\n  },\n});",
        "expression": "VantComponent({\n  props: {\n    inactive: Boolean,\n    percentage: {\n      type: Number,\n      observer: 'setLeft',\n    },\n    pivotText: String,\n    pivotColor: String,\n    trackColor: String,\n    showPivot: {\n      type: Boolean,\n      value: true,\n    },\n    color: {\n      type: String,\n      value: BLUE,\n    },\n    textColor: {\n      type: String,\n      value: '#fff',\n    },\n    strokeWidth: {\n      type: null,\n      value: 4,\n    },\n  },\n\n  data: {\n    right: 0,\n  },\n\n  mounted() {\n    this.setLeft();\n  },\n\n  methods: {\n    setLeft() {\n      Promise.all([\n        getRect(this, '.van-progress'),\n        getRect(this, '.van-progress__pivot'),\n      ]).then(([portion, pivot]) => {\n        if (portion && pivot) {\n          this.setData({\n            right: (pivot.width * (this.data.percentage - 100)) / 100,\n          });\n        }\n      });\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "props": {
              "inactive": "Boolean",
              "percentage": {
                "type": "Number",
                "observer": "setLeft"
              },
              "pivotText": "String",
              "pivotColor": "String",
              "trackColor": "String",
              "showPivot": {
                "type": "Boolean",
                "value": "true"
              },
              "color": {
                "type": "String",
                "value": "BLUE"
              },
              "textColor": {
                "type": "String",
                "value": "#fff"
              },
              "strokeWidth": {
                "type": "null",
                "value": "4"
              }
            },
            "data": {
              "right": "0"
            },
            "methods": {
              "setLeft": "setLeft() {\n      Promise.all([\n        getRect(this, '.van-progress'),\n        getRect(this, '.van-progress__pivot'),\n      ]).then(([portion, pivot]) => {\n        if (portion && pivot) {\n          this.setData({\n            right: (pivot.width * (this.data.percentage - 100)) / 100,\n          });\n        }\n      });\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "var utils = require('../wxs/utils.wxs');\nvar style = require('../wxs/style.wxs');\n\nfunction pivotText(pivotText, percentage) {\n  return pivotText || percentage + '%';\n}\n\nfunction rootStyle(data) {\n  return style({\n    'height': data.strokeWidth ? utils.addUnit(data.strokeWidth) : '',\n    'background': data.trackColor,\n  });\n}\n\nfunction portionStyle(data) {\n  return style({\n    background: data.inactive ? '#cacaca' : data.color,\n    width: data.percentage ? data.percentage + '%' : '',\n  });\n}\n\nfunction pivotStyle(data) {\n  return style({\n    color: data.textColor,\n    right: data.right + 'px',\n    background: data.pivotColor ? data.pivotColor : data.inactive ? '#cacaca' : data.color,\n  });\n}\n\nmodule.exports = {\n  pivotText: pivotText,\n  rootStyle: rootStyle,\n  portionStyle: portionStyle,\n  pivotStyle: pivotStyle,\n};\n",
    "statements": [
      {
        "kind": "FirstStatement",
        "text": "var utils = require('../wxs/utils.wxs');"
      },
      {
        "kind": "FirstStatement",
        "text": "var style = require('../wxs/style.wxs');"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function pivotText(pivotText, percentage) {\n  return pivotText || percentage + '%';\n}",
        "name": "pivotText"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function rootStyle(data) {\n  return style({\n    'height': data.strokeWidth ? utils.addUnit(data.strokeWidth) : '',\n    'background': data.trackColor,\n  });\n}",
        "name": "rootStyle"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function portionStyle(data) {\n  return style({\n    background: data.inactive ? '#cacaca' : data.color,\n    width: data.percentage ? data.percentage + '%' : '',\n  });\n}",
        "name": "portionStyle"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function pivotStyle(data) {\n  return style({\n    color: data.textColor,\n    right: data.right + 'px',\n    background: data.pivotColor ? data.pivotColor : data.inactive ? '#cacaca' : data.color,\n  });\n}",
        "name": "pivotStyle"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  pivotText: pivotText,\n  rootStyle: rootStyle,\n  portionStyle: portionStyle,\n  pivotStyle: pivotStyle,\n};",
        "expression": "module.exports = {\n  pivotText: pivotText,\n  rootStyle: rootStyle,\n  portionStyle: portionStyle,\n  pivotStyle: pivotStyle,\n}"
      }
    ]
  },
  "wxss": ".van-progress{background:var(--progress-background-color,#ebedf0);border-radius:var(--progress-height,4px);height:var(--progress-height,4px);position:relative}.van-progress__portion{background:var(--progress-color,#1989fa);border-radius:inherit;height:100%;left:0;position:absolute}.van-progress__pivot{background-color:var(--progress-pivot-background-color,#1989fa);border-radius:1em;box-sizing:border-box;color:var(--progress-pivot-text-color,#fff);font-size:var(--progress-pivot-font-size,10px);line-height:var(--progress-pivot-line-height,1.6);min-width:3.6em;padding:var(--progress-pivot-padding,0 5px);position:absolute;text-align:center;top:50%;transform:translateY(-50%);word-break:keep-all}"
}