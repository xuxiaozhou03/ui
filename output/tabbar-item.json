{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "{{ utils.bem('tabbar-item', { active }) }} custom-class",
        "style": "color: {{ active ? activeColor : inactiveColor }}",
        "@tap": "onClick"
      },
      "children": [
        {
          "tag": "div",
          "attrs": {
            "class": "van-tabbar-item__icon"
          },
          "children": [
            {
              "tag": "van-icon",
              "attrs": {
                "v-if": "icon",
                ":name": "icon",
                ":class-prefix": "iconPrefix",
                "custom-class": "van-tabbar-item__icon__inner"
              }
            },
            {
              "tag": "template",
              "attrs": {
                "v-else": ""
              },
              "children": [
                {
                  "tag": "slot",
                  "attrs": {
                    "v-if": "active",
                    "name": "icon-active"
                  }
                },
                {
                  "tag": "slot",
                  "attrs": {
                    "v-else": "",
                    "name": "icon"
                  }
                }
              ]
            },
            {
              "tag": "van-info",
              "attrs": {
                ":dot": "dot",
                ":info": "info",
                "custom-class": "van-tabbar-item__info"
              }
            }
          ]
        },
        {
          "tag": "div",
          "attrs": {
            "class": "van-tabbar-item__text"
          },
          "children": [
            {
              "tag": "slot"
            }
          ]
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { useParent } from '../common/relation';\n\nVantComponent({\n  props: {\n    info: null,\n    name: null,\n    icon: String,\n    dot: Boolean,\n    url: {\n      type: String,\n      value: '',\n    },\n    linkType: {\n      type: String,\n      value: 'redirectTo',\n    },\n    iconPrefix: {\n      type: String,\n      value: 'van-icon',\n    },\n  },\n\n  relation: useParent('tabbar'),\n\n  data: {\n    active: false,\n    activeColor: '',\n    inactiveColor: '',\n  },\n\n  methods: {\n    onClick() {\n      const { parent } = this;\n\n      if (parent) {\n        const index = parent.children.indexOf(this);\n        const active = this.data.name || index;\n\n        if (active !== this.data.active) {\n          parent.$emit('change', active);\n        }\n      }\n\n      const { url, linkType } = this.data;\n\n      if (url && wx[linkType]) {\n        return wx[linkType]({ url });\n      }\n\n      this.$emit('click');\n    },\n\n    updateFromParent() {\n      const { parent } = this;\n      if (!parent) {\n        return;\n      }\n\n      const index = parent.children.indexOf(this);\n      const parentData = parent.data;\n      const { data } = this;\n      const active = (data.name || index) === parentData.active;\n      const patch: Record<string, unknown> = {};\n\n      if (active !== data.active) {\n        patch.active = active;\n      }\n      if (parentData.activeColor !== data.activeColor) {\n        patch.activeColor = parentData.activeColor;\n      }\n      if (parentData.inactiveColor !== data.inactiveColor) {\n        patch.inactiveColor = parentData.inactiveColor;\n      }\n\n      if (Object.keys(patch).length > 0) {\n        this.setData(patch);\n      }\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { useParent } from '../common/relation';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  props: {\n    info: null,\n    name: null,\n    icon: String,\n    dot: Boolean,\n    url: {\n      type: String,\n      value: '',\n    },\n    linkType: {\n      type: String,\n      value: 'redirectTo',\n    },\n    iconPrefix: {\n      type: String,\n      value: 'van-icon',\n    },\n  },\n\n  relation: useParent('tabbar'),\n\n  data: {\n    active: false,\n    activeColor: '',\n    inactiveColor: '',\n  },\n\n  methods: {\n    onClick() {\n      const { parent } = this;\n\n      if (parent) {\n        const index = parent.children.indexOf(this);\n        const active = this.data.name || index;\n\n        if (active !== this.data.active) {\n          parent.$emit('change', active);\n        }\n      }\n\n      const { url, linkType } = this.data;\n\n      if (url && wx[linkType]) {\n        return wx[linkType]({ url });\n      }\n\n      this.$emit('click');\n    },\n\n    updateFromParent() {\n      const { parent } = this;\n      if (!parent) {\n        return;\n      }\n\n      const index = parent.children.indexOf(this);\n      const parentData = parent.data;\n      const { data } = this;\n      const active = (data.name || index) === parentData.active;\n      const patch: Record<string, unknown> = {};\n\n      if (active !== data.active) {\n        patch.active = active;\n      }\n      if (parentData.activeColor !== data.activeColor) {\n        patch.activeColor = parentData.activeColor;\n      }\n      if (parentData.inactiveColor !== data.inactiveColor) {\n        patch.inactiveColor = parentData.inactiveColor;\n      }\n\n      if (Object.keys(patch).length > 0) {\n        this.setData(patch);\n      }\n    },\n  },\n});",
        "expression": "VantComponent({\n  props: {\n    info: null,\n    name: null,\n    icon: String,\n    dot: Boolean,\n    url: {\n      type: String,\n      value: '',\n    },\n    linkType: {\n      type: String,\n      value: 'redirectTo',\n    },\n    iconPrefix: {\n      type: String,\n      value: 'van-icon',\n    },\n  },\n\n  relation: useParent('tabbar'),\n\n  data: {\n    active: false,\n    activeColor: '',\n    inactiveColor: '',\n  },\n\n  methods: {\n    onClick() {\n      const { parent } = this;\n\n      if (parent) {\n        const index = parent.children.indexOf(this);\n        const active = this.data.name || index;\n\n        if (active !== this.data.active) {\n          parent.$emit('change', active);\n        }\n      }\n\n      const { url, linkType } = this.data;\n\n      if (url && wx[linkType]) {\n        return wx[linkType]({ url });\n      }\n\n      this.$emit('click');\n    },\n\n    updateFromParent() {\n      const { parent } = this;\n      if (!parent) {\n        return;\n      }\n\n      const index = parent.children.indexOf(this);\n      const parentData = parent.data;\n      const { data } = this;\n      const active = (data.name || index) === parentData.active;\n      const patch: Record<string, unknown> = {};\n\n      if (active !== data.active) {\n        patch.active = active;\n      }\n      if (parentData.activeColor !== data.activeColor) {\n        patch.activeColor = parentData.activeColor;\n      }\n      if (parentData.inactiveColor !== data.inactiveColor) {\n        patch.inactiveColor = parentData.inactiveColor;\n      }\n\n      if (Object.keys(patch).length > 0) {\n        this.setData(patch);\n      }\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "props": {
              "info": "null",
              "name": "null",
              "icon": "String",
              "dot": "Boolean",
              "url": {
                "type": "String",
                "value": ""
              },
              "linkType": {
                "type": "String",
                "value": "redirectTo"
              },
              "iconPrefix": {
                "type": "String",
                "value": "van-icon"
              }
            },
            "relation": "useParent('tabbar')",
            "data": {
              "active": "false",
              "activeColor": "",
              "inactiveColor": ""
            },
            "methods": {
              "onClick": "onClick() {\n      const { parent } = this;\n\n      if (parent) {\n        const index = parent.children.indexOf(this);\n        const active = this.data.name || index;\n\n        if (active !== this.data.active) {\n          parent.$emit('change', active);\n        }\n      }\n\n      const { url, linkType } = this.data;\n\n      if (url && wx[linkType]) {\n        return wx[linkType]({ url });\n      }\n\n      this.$emit('click');\n    }",
              "updateFromParent": "updateFromParent() {\n      const { parent } = this;\n      if (!parent) {\n        return;\n      }\n\n      const index = parent.children.indexOf(this);\n      const parentData = parent.data;\n      const { data } = this;\n      const active = (data.name || index) === parentData.active;\n      const patch: Record<string, unknown> = {};\n\n      if (active !== data.active) {\n        patch.active = active;\n      }\n      if (parentData.activeColor !== data.activeColor) {\n        patch.activeColor = parentData.activeColor;\n      }\n      if (parentData.inactiveColor !== data.inactiveColor) {\n        patch.inactiveColor = parentData.inactiveColor;\n      }\n\n      if (Object.keys(patch).length > 0) {\n        this.setData(patch);\n      }\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": null,
  "wxss": ":host{flex:1}.van-tabbar-item{align-items:center;color:var(--tabbar-item-text-color,#646566);display:flex;flex-direction:column;font-size:var(--tabbar-item-font-size,12px);height:100%;justify-content:center;line-height:var(--tabbar-item-line-height,1)}.van-tabbar-item__icon{font-size:var(--tabbar-item-icon-size,22px);margin-bottom:var(--tabbar-item-margin-bottom,4px);position:relative}.van-tabbar-item__icon__inner{display:block;min-width:1em}.van-tabbar-item--active{color:var(--tabbar-item-active-color,#1989fa)}.van-tabbar-item__info{margin-top:2px}"
}