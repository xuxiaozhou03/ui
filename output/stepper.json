{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "{{ utils.bem('stepper', [theme]) }} custom-class"
      },
      "children": [
        {
          "tag": "div",
          "attrs": {
            "v-if": "showMinus",
            "data-type": "minus",
            ":style": "buttonStyle",
            "class": "minus-class {{ utils.bem('stepper__minus', { disabled: disabled || disableMinus || currentValue <= min }) }}",
            "hover-class": "van-stepper__minus--hover",
            "hover-stay-time": "70",
            "@tap": "onTap",
            "@touchstart": "onTouchStart",
            "@touchend": "onTouchEnd"
          },
          "children": [
            {
              "tag": "slot",
              "attrs": {
                "name": "minus"
              }
            }
          ]
        },
        {
          "tag": "input",
          "attrs": {
            ":type": "integer ? 'number' : 'digit'",
            "class": "input-class {{ utils.bem('stepper__input', { disabled: disabled || disableInput }) }}",
            ":style": "inputStyle",
            ":value": "currentValue",
            ":focus": "focus",
            ":disabled": "disabled || disableInput",
            ":always-embed": "alwaysEmbed",
            "@input": "onInput",
            "@focus": "onFocus",
            "@blur": "onBlur"
          }
        },
        {
          "tag": "div",
          "attrs": {
            "v-if": "showPlus",
            "data-type": "plus",
            ":style": "buttonStyle",
            "class": "plus-class {{ utils.bem('stepper__plus', { disabled: disabled || disablePlus || currentValue >= max }) }}",
            "hover-class": "van-stepper__plus--hover",
            "hover-stay-time": "70",
            "@tap": "onTap",
            "@touchstart": "onTouchStart",
            "@touchend": "onTouchEnd"
          },
          "children": [
            {
              "tag": "slot",
              "attrs": {
                "name": "plus"
              }
            }
          ]
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { isDef } from '../common/validator';\n\nconst LONG_PRESS_START_TIME = 600;\nconst LONG_PRESS_INTERVAL = 200;\n\n// add num and avoid float number\nfunction add(num1: number, num2: number) {\n  const cardinal = 10 ** 10;\n  return Math.round((num1 + num2) * cardinal) / cardinal;\n}\n\nfunction equal(value1: number | string, value2: number | string) {\n  return String(value1) === String(value2);\n}\n\nVantComponent({\n  field: true,\n\n  classes: ['input-class', 'plus-class', 'minus-class'],\n\n  props: {\n    value: {\n      type: null,\n    },\n    integer: {\n      type: Boolean,\n      observer: 'check',\n    },\n    disabled: Boolean,\n    inputWidth: String,\n    buttonSize: String,\n    asyncChange: Boolean,\n    disableInput: Boolean,\n    decimalLength: {\n      type: Number,\n      value: null as unknown as number,\n      observer: 'check',\n    },\n    min: {\n      type: null,\n      value: 1,\n      observer: 'check',\n    },\n    max: {\n      type: null,\n      value: Number.MAX_SAFE_INTEGER,\n      observer: 'check',\n    },\n    step: {\n      type: null,\n      value: 1,\n    },\n    showPlus: {\n      type: Boolean,\n      value: true,\n    },\n    showMinus: {\n      type: Boolean,\n      value: true,\n    },\n    disablePlus: Boolean,\n    disableMinus: Boolean,\n    longPress: {\n      type: Boolean,\n      value: true,\n    },\n    theme: String,\n    alwaysEmbed: Boolean,\n  },\n\n  data: {\n    currentValue: '',\n  },\n\n  watch: {\n    value() {\n      this.observeValue();\n    },\n  },\n\n  created() {\n    this.setData({\n      currentValue: this.format(this.data.value),\n    });\n  },\n\n  methods: {\n    observeValue() {\n      const { value } = this.data;\n      this.setData({ currentValue: this.format(value) });\n    },\n\n    check() {\n      const val = this.format(this.data.currentValue);\n      if (!equal(val, this.data.currentValue)) {\n        this.setData({ currentValue: val });\n      }\n    },\n\n    isDisabled(type: string) {\n      const { disabled, disablePlus, disableMinus, currentValue, max, min } =\n        this.data;\n\n      if (type === 'plus') {\n        return disabled || disablePlus || +currentValue >= +max;\n      }\n\n      return disabled || disableMinus || +currentValue <= +min;\n    },\n\n    onFocus(event: WechatMiniprogram.InputFocus) {\n      this.$emit('focus', event.detail);\n    },\n\n    onBlur(event: WechatMiniprogram.InputBlur) {\n      const value = this.format(event.detail.value);\n\n      this.setData({ currentValue: value });\n\n      this.emitChange(value);\n\n      this.$emit('blur', {\n        ...event.detail,\n        value,\n      });\n    },\n\n    // filter illegal characters\n    filter(value) {\n      value = String(value).replace(/[^0-9.-]/g, '');\n\n      if (this.data.integer && value.indexOf('.') !== -1) {\n        value = value.split('.')[0];\n      }\n\n      return value;\n    },\n\n    // limit value range\n    format(value) {\n      value = this.filter(value);\n\n      // format range\n      value = value === '' ? 0 : +value;\n      value = Math.max(Math.min(this.data.max, value), this.data.min);\n\n      // format decimal\n      if (isDef(this.data.decimalLength)) {\n        value = value.toFixed(this.data.decimalLength);\n      }\n\n      return value;\n    },\n\n    onInput(event: WechatMiniprogram.Input) {\n      const { value = '' } = event.detail || {};\n\n      // allow input to be empty\n      if (value === '') {\n        return;\n      }\n\n      let formatted = this.format(value);\n\n      this.emitChange(formatted);\n    },\n\n    emitChange(value: string) {\n      if (!this.data.asyncChange) {\n        this.setData({ currentValue: value });\n      }\n\n      this.$emit('change', value);\n    },\n\n    onChange() {\n      const { type } = this;\n\n      if (this.isDisabled(type)) {\n        this.$emit('overlimit', type);\n        return;\n      }\n\n      const diff = type === 'minus' ? -this.data.step : +this.data.step;\n\n      const value = this.format(add(+this.data.currentValue, diff));\n\n      this.emitChange(value);\n      this.$emit(type);\n    },\n\n    longPressStep() {\n      this.longPressTimer = setTimeout(() => {\n        this.onChange();\n        this.longPressStep();\n      }, LONG_PRESS_INTERVAL);\n    },\n\n    onTap(event: WechatMiniprogram.TouchEvent) {\n      const { type } = event.currentTarget.dataset;\n      this.type = type;\n      this.onChange();\n    },\n\n    onTouchStart(event: WechatMiniprogram.TouchEvent) {\n      if (!this.data.longPress) {\n        return;\n      }\n      clearTimeout(this.longPressTimer);\n\n      const { type } = event.currentTarget.dataset;\n      this.type = type;\n      this.isLongPress = false;\n\n      this.longPressTimer = setTimeout(() => {\n        this.isLongPress = true;\n        this.onChange();\n        this.longPressStep();\n      }, LONG_PRESS_START_TIME);\n    },\n\n    onTouchEnd() {\n      if (!this.data.longPress) {\n        return;\n      }\n\n      clearTimeout(this.longPressTimer);\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { isDef } from '../common/validator';"
      },
      {
        "kind": "FirstStatement",
        "text": "const LONG_PRESS_START_TIME = 600;"
      },
      {
        "kind": "FirstStatement",
        "text": "const LONG_PRESS_INTERVAL = 200;"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function add(num1: number, num2: number) {\n  const cardinal = 10 ** 10;\n  return Math.round((num1 + num2) * cardinal) / cardinal;\n}",
        "name": "add"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function equal(value1: number | string, value2: number | string) {\n  return String(value1) === String(value2);\n}",
        "name": "equal"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  field: true,\n\n  classes: ['input-class', 'plus-class', 'minus-class'],\n\n  props: {\n    value: {\n      type: null,\n    },\n    integer: {\n      type: Boolean,\n      observer: 'check',\n    },\n    disabled: Boolean,\n    inputWidth: String,\n    buttonSize: String,\n    asyncChange: Boolean,\n    disableInput: Boolean,\n    decimalLength: {\n      type: Number,\n      value: null as unknown as number,\n      observer: 'check',\n    },\n    min: {\n      type: null,\n      value: 1,\n      observer: 'check',\n    },\n    max: {\n      type: null,\n      value: Number.MAX_SAFE_INTEGER,\n      observer: 'check',\n    },\n    step: {\n      type: null,\n      value: 1,\n    },\n    showPlus: {\n      type: Boolean,\n      value: true,\n    },\n    showMinus: {\n      type: Boolean,\n      value: true,\n    },\n    disablePlus: Boolean,\n    disableMinus: Boolean,\n    longPress: {\n      type: Boolean,\n      value: true,\n    },\n    theme: String,\n    alwaysEmbed: Boolean,\n  },\n\n  data: {\n    currentValue: '',\n  },\n\n  watch: {\n    value() {\n      this.observeValue();\n    },\n  },\n\n  created() {\n    this.setData({\n      currentValue: this.format(this.data.value),\n    });\n  },\n\n  methods: {\n    observeValue() {\n      const { value } = this.data;\n      this.setData({ currentValue: this.format(value) });\n    },\n\n    check() {\n      const val = this.format(this.data.currentValue);\n      if (!equal(val, this.data.currentValue)) {\n        this.setData({ currentValue: val });\n      }\n    },\n\n    isDisabled(type: string) {\n      const { disabled, disablePlus, disableMinus, currentValue, max, min } =\n        this.data;\n\n      if (type === 'plus') {\n        return disabled || disablePlus || +currentValue >= +max;\n      }\n\n      return disabled || disableMinus || +currentValue <= +min;\n    },\n\n    onFocus(event: WechatMiniprogram.InputFocus) {\n      this.$emit('focus', event.detail);\n    },\n\n    onBlur(event: WechatMiniprogram.InputBlur) {\n      const value = this.format(event.detail.value);\n\n      this.setData({ currentValue: value });\n\n      this.emitChange(value);\n\n      this.$emit('blur', {\n        ...event.detail,\n        value,\n      });\n    },\n\n    // filter illegal characters\n    filter(value) {\n      value = String(value).replace(/[^0-9.-]/g, '');\n\n      if (this.data.integer && value.indexOf('.') !== -1) {\n        value = value.split('.')[0];\n      }\n\n      return value;\n    },\n\n    // limit value range\n    format(value) {\n      value = this.filter(value);\n\n      // format range\n      value = value === '' ? 0 : +value;\n      value = Math.max(Math.min(this.data.max, value), this.data.min);\n\n      // format decimal\n      if (isDef(this.data.decimalLength)) {\n        value = value.toFixed(this.data.decimalLength);\n      }\n\n      return value;\n    },\n\n    onInput(event: WechatMiniprogram.Input) {\n      const { value = '' } = event.detail || {};\n\n      // allow input to be empty\n      if (value === '') {\n        return;\n      }\n\n      let formatted = this.format(value);\n\n      this.emitChange(formatted);\n    },\n\n    emitChange(value: string) {\n      if (!this.data.asyncChange) {\n        this.setData({ currentValue: value });\n      }\n\n      this.$emit('change', value);\n    },\n\n    onChange() {\n      const { type } = this;\n\n      if (this.isDisabled(type)) {\n        this.$emit('overlimit', type);\n        return;\n      }\n\n      const diff = type === 'minus' ? -this.data.step : +this.data.step;\n\n      const value = this.format(add(+this.data.currentValue, diff));\n\n      this.emitChange(value);\n      this.$emit(type);\n    },\n\n    longPressStep() {\n      this.longPressTimer = setTimeout(() => {\n        this.onChange();\n        this.longPressStep();\n      }, LONG_PRESS_INTERVAL);\n    },\n\n    onTap(event: WechatMiniprogram.TouchEvent) {\n      const { type } = event.currentTarget.dataset;\n      this.type = type;\n      this.onChange();\n    },\n\n    onTouchStart(event: WechatMiniprogram.TouchEvent) {\n      if (!this.data.longPress) {\n        return;\n      }\n      clearTimeout(this.longPressTimer);\n\n      const { type } = event.currentTarget.dataset;\n      this.type = type;\n      this.isLongPress = false;\n\n      this.longPressTimer = setTimeout(() => {\n        this.isLongPress = true;\n        this.onChange();\n        this.longPressStep();\n      }, LONG_PRESS_START_TIME);\n    },\n\n    onTouchEnd() {\n      if (!this.data.longPress) {\n        return;\n      }\n\n      clearTimeout(this.longPressTimer);\n    },\n  },\n});",
        "expression": "VantComponent({\n  field: true,\n\n  classes: ['input-class', 'plus-class', 'minus-class'],\n\n  props: {\n    value: {\n      type: null,\n    },\n    integer: {\n      type: Boolean,\n      observer: 'check',\n    },\n    disabled: Boolean,\n    inputWidth: String,\n    buttonSize: String,\n    asyncChange: Boolean,\n    disableInput: Boolean,\n    decimalLength: {\n      type: Number,\n      value: null as unknown as number,\n      observer: 'check',\n    },\n    min: {\n      type: null,\n      value: 1,\n      observer: 'check',\n    },\n    max: {\n      type: null,\n      value: Number.MAX_SAFE_INTEGER,\n      observer: 'check',\n    },\n    step: {\n      type: null,\n      value: 1,\n    },\n    showPlus: {\n      type: Boolean,\n      value: true,\n    },\n    showMinus: {\n      type: Boolean,\n      value: true,\n    },\n    disablePlus: Boolean,\n    disableMinus: Boolean,\n    longPress: {\n      type: Boolean,\n      value: true,\n    },\n    theme: String,\n    alwaysEmbed: Boolean,\n  },\n\n  data: {\n    currentValue: '',\n  },\n\n  watch: {\n    value() {\n      this.observeValue();\n    },\n  },\n\n  created() {\n    this.setData({\n      currentValue: this.format(this.data.value),\n    });\n  },\n\n  methods: {\n    observeValue() {\n      const { value } = this.data;\n      this.setData({ currentValue: this.format(value) });\n    },\n\n    check() {\n      const val = this.format(this.data.currentValue);\n      if (!equal(val, this.data.currentValue)) {\n        this.setData({ currentValue: val });\n      }\n    },\n\n    isDisabled(type: string) {\n      const { disabled, disablePlus, disableMinus, currentValue, max, min } =\n        this.data;\n\n      if (type === 'plus') {\n        return disabled || disablePlus || +currentValue >= +max;\n      }\n\n      return disabled || disableMinus || +currentValue <= +min;\n    },\n\n    onFocus(event: WechatMiniprogram.InputFocus) {\n      this.$emit('focus', event.detail);\n    },\n\n    onBlur(event: WechatMiniprogram.InputBlur) {\n      const value = this.format(event.detail.value);\n\n      this.setData({ currentValue: value });\n\n      this.emitChange(value);\n\n      this.$emit('blur', {\n        ...event.detail,\n        value,\n      });\n    },\n\n    // filter illegal characters\n    filter(value) {\n      value = String(value).replace(/[^0-9.-]/g, '');\n\n      if (this.data.integer && value.indexOf('.') !== -1) {\n        value = value.split('.')[0];\n      }\n\n      return value;\n    },\n\n    // limit value range\n    format(value) {\n      value = this.filter(value);\n\n      // format range\n      value = value === '' ? 0 : +value;\n      value = Math.max(Math.min(this.data.max, value), this.data.min);\n\n      // format decimal\n      if (isDef(this.data.decimalLength)) {\n        value = value.toFixed(this.data.decimalLength);\n      }\n\n      return value;\n    },\n\n    onInput(event: WechatMiniprogram.Input) {\n      const { value = '' } = event.detail || {};\n\n      // allow input to be empty\n      if (value === '') {\n        return;\n      }\n\n      let formatted = this.format(value);\n\n      this.emitChange(formatted);\n    },\n\n    emitChange(value: string) {\n      if (!this.data.asyncChange) {\n        this.setData({ currentValue: value });\n      }\n\n      this.$emit('change', value);\n    },\n\n    onChange() {\n      const { type } = this;\n\n      if (this.isDisabled(type)) {\n        this.$emit('overlimit', type);\n        return;\n      }\n\n      const diff = type === 'minus' ? -this.data.step : +this.data.step;\n\n      const value = this.format(add(+this.data.currentValue, diff));\n\n      this.emitChange(value);\n      this.$emit(type);\n    },\n\n    longPressStep() {\n      this.longPressTimer = setTimeout(() => {\n        this.onChange();\n        this.longPressStep();\n      }, LONG_PRESS_INTERVAL);\n    },\n\n    onTap(event: WechatMiniprogram.TouchEvent) {\n      const { type } = event.currentTarget.dataset;\n      this.type = type;\n      this.onChange();\n    },\n\n    onTouchStart(event: WechatMiniprogram.TouchEvent) {\n      if (!this.data.longPress) {\n        return;\n      }\n      clearTimeout(this.longPressTimer);\n\n      const { type } = event.currentTarget.dataset;\n      this.type = type;\n      this.isLongPress = false;\n\n      this.longPressTimer = setTimeout(() => {\n        this.isLongPress = true;\n        this.onChange();\n        this.longPressStep();\n      }, LONG_PRESS_START_TIME);\n    },\n\n    onTouchEnd() {\n      if (!this.data.longPress) {\n        return;\n      }\n\n      clearTimeout(this.longPressTimer);\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "field": "true",
            "classes": [
              "'input-class'",
              "'plus-class'",
              "'minus-class'"
            ],
            "props": {
              "value": {
                "type": "null"
              },
              "integer": {
                "type": "Boolean",
                "observer": "check"
              },
              "disabled": "Boolean",
              "inputWidth": "String",
              "buttonSize": "String",
              "asyncChange": "Boolean",
              "disableInput": "Boolean",
              "decimalLength": {
                "type": "Number",
                "value": "null as unknown as number",
                "observer": "check"
              },
              "min": {
                "type": "null",
                "value": "1",
                "observer": "check"
              },
              "max": {
                "type": "null",
                "value": "Number.MAX_SAFE_INTEGER",
                "observer": "check"
              },
              "step": {
                "type": "null",
                "value": "1"
              },
              "showPlus": {
                "type": "Boolean",
                "value": "true"
              },
              "showMinus": {
                "type": "Boolean",
                "value": "true"
              },
              "disablePlus": "Boolean",
              "disableMinus": "Boolean",
              "longPress": {
                "type": "Boolean",
                "value": "true"
              },
              "theme": "String",
              "alwaysEmbed": "Boolean"
            },
            "data": {
              "currentValue": ""
            },
            "watch": {},
            "methods": {
              "observeValue": "observeValue() {\n      const { value } = this.data;\n      this.setData({ currentValue: this.format(value) });\n    }",
              "check": "check() {\n      const val = this.format(this.data.currentValue);\n      if (!equal(val, this.data.currentValue)) {\n        this.setData({ currentValue: val });\n      }\n    }",
              "isDisabled": "isDisabled(type: string) {\n      const { disabled, disablePlus, disableMinus, currentValue, max, min } =\n        this.data;\n\n      if (type === 'plus') {\n        return disabled || disablePlus || +currentValue >= +max;\n      }\n\n      return disabled || disableMinus || +currentValue <= +min;\n    }",
              "onFocus": "onFocus(event: WechatMiniprogram.InputFocus) {\n      this.$emit('focus', event.detail);\n    }",
              "onBlur": "onBlur(event: WechatMiniprogram.InputBlur) {\n      const value = this.format(event.detail.value);\n\n      this.setData({ currentValue: value });\n\n      this.emitChange(value);\n\n      this.$emit('blur', {\n        ...event.detail,\n        value,\n      });\n    }",
              "filter": "filter(value) {\n      value = String(value).replace(/[^0-9.-]/g, '');\n\n      if (this.data.integer && value.indexOf('.') !== -1) {\n        value = value.split('.')[0];\n      }\n\n      return value;\n    }",
              "format": "format(value) {\n      value = this.filter(value);\n\n      // format range\n      value = value === '' ? 0 : +value;\n      value = Math.max(Math.min(this.data.max, value), this.data.min);\n\n      // format decimal\n      if (isDef(this.data.decimalLength)) {\n        value = value.toFixed(this.data.decimalLength);\n      }\n\n      return value;\n    }",
              "onInput": "onInput(event: WechatMiniprogram.Input) {\n      const { value = '' } = event.detail || {};\n\n      // allow input to be empty\n      if (value === '') {\n        return;\n      }\n\n      let formatted = this.format(value);\n\n      this.emitChange(formatted);\n    }",
              "emitChange": "emitChange(value: string) {\n      if (!this.data.asyncChange) {\n        this.setData({ currentValue: value });\n      }\n\n      this.$emit('change', value);\n    }",
              "onChange": "onChange() {\n      const { type } = this;\n\n      if (this.isDisabled(type)) {\n        this.$emit('overlimit', type);\n        return;\n      }\n\n      const diff = type === 'minus' ? -this.data.step : +this.data.step;\n\n      const value = this.format(add(+this.data.currentValue, diff));\n\n      this.emitChange(value);\n      this.$emit(type);\n    }",
              "longPressStep": "longPressStep() {\n      this.longPressTimer = setTimeout(() => {\n        this.onChange();\n        this.longPressStep();\n      }, LONG_PRESS_INTERVAL);\n    }",
              "onTap": "onTap(event: WechatMiniprogram.TouchEvent) {\n      const { type } = event.currentTarget.dataset;\n      this.type = type;\n      this.onChange();\n    }",
              "onTouchStart": "onTouchStart(event: WechatMiniprogram.TouchEvent) {\n      if (!this.data.longPress) {\n        return;\n      }\n      clearTimeout(this.longPressTimer);\n\n      const { type } = event.currentTarget.dataset;\n      this.type = type;\n      this.isLongPress = false;\n\n      this.longPressTimer = setTimeout(() => {\n        this.isLongPress = true;\n        this.onChange();\n        this.longPressStep();\n      }, LONG_PRESS_START_TIME);\n    }",
              "onTouchEnd": "onTouchEnd() {\n      if (!this.data.longPress) {\n        return;\n      }\n\n      clearTimeout(this.longPressTimer);\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "var style = require('../wxs/style.wxs');\nvar addUnit = require('../wxs/add-unit.wxs');\n\nfunction buttonStyle(data) {\n  return style({\n    width: addUnit(data.buttonSize),\n    height: addUnit(data.buttonSize),\n  });\n}\n\nfunction inputStyle(data) {\n  return style({\n    width: addUnit(data.inputWidth),\n    height: addUnit(data.buttonSize),\n  });\n}\n\nmodule.exports = {\n  buttonStyle: buttonStyle,\n  inputStyle: inputStyle,\n};\n",
    "statements": [
      {
        "kind": "FirstStatement",
        "text": "var style = require('../wxs/style.wxs');"
      },
      {
        "kind": "FirstStatement",
        "text": "var addUnit = require('../wxs/add-unit.wxs');"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function buttonStyle(data) {\n  return style({\n    width: addUnit(data.buttonSize),\n    height: addUnit(data.buttonSize),\n  });\n}",
        "name": "buttonStyle"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function inputStyle(data) {\n  return style({\n    width: addUnit(data.inputWidth),\n    height: addUnit(data.buttonSize),\n  });\n}",
        "name": "inputStyle"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  buttonStyle: buttonStyle,\n  inputStyle: inputStyle,\n};",
        "expression": "module.exports = {\n  buttonStyle: buttonStyle,\n  inputStyle: inputStyle,\n}"
      }
    ]
  },
  "wxss": ".van-stepper{font-size:0}.van-stepper__minus,.van-stepper__plus{background-color:var(--stepper-background-color,#f2f3f5);border:0;box-sizing:border-box;color:var(--stepper-button-icon-color,#323233);display:inline-block;height:var(--stepper-input-height,28px);margin:1px;padding:var(--padding-base,4px);position:relative;vertical-align:middle;width:var(--stepper-input-height,28px)}.van-stepper__minus:before,.van-stepper__plus:before{height:1px;width:9px}.van-stepper__minus:after,.van-stepper__plus:after{height:9px;width:1px}.van-stepper__minus:empty.van-stepper__minus:after,.van-stepper__minus:empty.van-stepper__minus:before,.van-stepper__minus:empty.van-stepper__plus:after,.van-stepper__minus:empty.van-stepper__plus:before,.van-stepper__plus:empty.van-stepper__minus:after,.van-stepper__plus:empty.van-stepper__minus:before,.van-stepper__plus:empty.van-stepper__plus:after,.van-stepper__plus:empty.van-stepper__plus:before{background-color:currentColor;bottom:0;content:\"\";left:0;margin:auto;position:absolute;right:0;top:0}.van-stepper__minus--hover,.van-stepper__plus--hover{background-color:var(--stepper-active-color,#e8e8e8)}.van-stepper__minus--disabled,.van-stepper__plus--disabled{color:var(--stepper-button-disabled-icon-color,#c8c9cc)}.van-stepper__minus--disabled,.van-stepper__minus--disabled.van-stepper__minus--hover,.van-stepper__minus--disabled.van-stepper__plus--hover,.van-stepper__plus--disabled,.van-stepper__plus--disabled.van-stepper__minus--hover,.van-stepper__plus--disabled.van-stepper__plus--hover{background-color:var(--stepper-button-disabled-color,#f7f8fa)}.van-stepper__minus{border-radius:var(--stepper-border-radius,var(--stepper-border-radius,4px)) 0 0 var(--stepper-border-radius,var(--stepper-border-radius,4px))}.van-stepper__minus:after{display:none}.van-stepper__plus{border-radius:0 var(--stepper-border-radius,var(--stepper-border-radius,4px)) var(--stepper-border-radius,var(--stepper-border-radius,4px)) 0}.van-stepper--round .van-stepper__input{background-color:initial!important}.van-stepper--round .van-stepper__minus,.van-stepper--round .van-stepper__plus{border-radius:100%}.van-stepper--round .van-stepper__minus:active,.van-stepper--round .van-stepper__plus:active{opacity:.7}.van-stepper--round .van-stepper__minus--disabled,.van-stepper--round .van-stepper__minus--disabled:active,.van-stepper--round .van-stepper__plus--disabled,.van-stepper--round .van-stepper__plus--disabled:active{opacity:.3}.van-stepper--round .van-stepper__plus{background-color:#ee0a24;color:#fff}.van-stepper--round .van-stepper__minus{background-color:#fff;border:1px solid #ee0a24;color:#ee0a24}.van-stepper__input{-webkit-appearance:none;background-color:var(--stepper-background-color,#f2f3f5);border:0;border-radius:0;border-width:1px 0;box-sizing:border-box;color:var(--stepper-input-text-color,#323233);display:inline-block;font-size:var(--stepper-input-font-size,14px);height:var(--stepper-input-height,28px);margin:1px;min-height:0;padding:1px;text-align:center;vertical-align:middle;width:var(--stepper-input-width,32px)}.van-stepper__input--disabled{background-color:var(--stepper-input-disabled-background-color,#f2f3f5);color:var(--stepper-input-disabled-text-color,#c8c9cc)}"
}