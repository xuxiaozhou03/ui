{
  "wxml": [
    {
      "tag": "van-popup",
      "attrs": {
        ":show": "show",
        ":z-index": "zIndex",
        ":overlay": "overlay",
        ":transition": "transition",
        "custom-class": "van-dialog van-dialog--{{ theme }}{{ className }} custom-class",
        "custom-style": "width: {{ utils.addUnit(width) }};{{ customStyle }}",
        ":overlay-style": "overlayStyle",
        ":close-on-click-overlay": "closeOnClickOverlay",
        ":root-portal": "rootPortal",
        "@close": "onClickOverlay"
      },
      "children": [
        {
          "tag": "div",
          "attrs": {
            "v-if": "title || useTitleSlot",
            ":class": "bem('dialog__header', { isolated: !(message || useSlot) })"
          },
          "children": [
            {
              "tag": "slot",
              "attrs": {
                "v-if": "useTitleSlot",
                "name": "title"
              }
            },
            {
              "tag": "template",
              "attrs": {
                "v-else-if": "title"
              }
            }
          ]
        },
        {
          "tag": "slot",
          "attrs": {
            "v-if": "useSlot"
          }
        },
        {
          "tag": "div",
          "attrs": {
            "v-else-if": "message",
            ":class": "bem('dialog__message', [theme, messageAlign, { hasTitle: title }])"
          },
          "children": [
            {
              "tag": "text",
              "attrs": {
                "class": "van-dialog__message-text"
              }
            }
          ]
        },
        {
          "tag": "van-goods-action",
          "attrs": {
            "v-if": "theme === 'round-button'",
            "custom-class": "van-dialog__footer--round-button"
          },
          "children": [
            {
              "tag": "van-goods-action-button",
              "attrs": {
                "v-if": "showCancelButton",
                "size": "large",
                ":loading": "loading.cancel",
                ":custom-class": "cn('van-dialog__button van-hairline--right van-dialog__cancel', cancleButtonClass)",
                "custom-style": "color: {{ cancelButtonColor }}",
                "@click": "onCancel"
              }
            },
            {
              "tag": "van-goods-action-button",
              "attrs": {
                "v-if": "showConfirmButton",
                "size": "large",
                ":loading": "loading.confirm",
                ":custom-class": "cn('van-dialog__button van-dialog__confirm', confirmButtonClass)",
                "custom-style": "color: {{ confirmButtonColor }}",
                ":button-id": "confirmButtonId",
                ":open-type": "confirmButtonOpenType",
                ":lang": "lang",
                ":business-id": "businessId",
                ":session-from": "sessionFrom",
                ":send-message-title": "sendMessageTitle",
                ":send-message-path": "sendMessagePath",
                ":send-message-img": "sendMessageImg",
                ":show-message-card": "showMessageCard",
                ":app-parameter": "appParameter",
                "@agreeprivacyauthorization": "onAgreePrivacyAuthorization",
                "@getRealTimePhoneNumber": "onGetRealTimePhoneNumber",
                "@click": "onConfirm",
                "@getuserinfo": "onGetUserInfo",
                "@contact": "onContact",
                "@getphonenumber": "onGetPhoneNumber",
                "@error": "onError",
                "@launchapp": "onLaunchApp",
                "@opensetting": "onOpenSetting"
              }
            }
          ]
        },
        {
          "tag": "div",
          "attrs": {
            "v-else-if": "showCancelButton || showConfirmButton",
            "class": "van-hairline--top van-dialog__footer"
          },
          "children": [
            {
              "tag": "template",
              "attrs": {
                "v-if": "showCancelButton"
              },
              "children": [
                {
                  "tag": "slot",
                  "attrs": {
                    "v-if": "useCancelButtonSlot",
                    "name": "cancel-button"
                  }
                },
                {
                  "tag": "van-button",
                  "attrs": {
                    "v-else": "",
                    "size": "large",
                    ":loading": "loading.cancel",
                    ":custom-class": "cn('van-dialog__button van-hairline--right van-dialog__cancel', cancleButtonClass)",
                    "custom-style": "color: {{ cancelButtonColor }}",
                    "@click": "onCancel"
                  }
                }
              ]
            },
            {
              "tag": "template",
              "attrs": {
                "v-if": "showConfirmButton"
              },
              "children": [
                {
                  "tag": "slot",
                  "attrs": {
                    "v-if": "useConfirmButtonSlot",
                    "name": "confirm-button"
                  }
                },
                {
                  "tag": "van-button",
                  "attrs": {
                    "v-else": "",
                    "size": "large",
                    ":loading": "loading.confirm",
                    ":custom-class": "cn('van-dialog__button van-dialog__confirm', confirmButtonClass)",
                    "custom-style": "color: {{ confirmButtonColor }}",
                    ":button-id": "confirmButtonId",
                    ":open-type": "confirmButtonOpenType",
                    ":lang": "lang",
                    ":business-id": "businessId",
                    ":session-from": "sessionFrom",
                    ":send-message-title": "sendMessageTitle",
                    ":send-message-path": "sendMessagePath",
                    ":send-message-img": "sendMessageImg",
                    ":show-message-card": "showMessageCard",
                    ":app-parameter": "appParameter",
                    "@agreeprivacyauthorization": "onAgreePrivacyAuthorization",
                    "@getRealTimePhoneNumber": "onGetRealTimePhoneNumber",
                    "@click": "onConfirm",
                    "@getuserinfo": "onGetUserInfo",
                    "@contact": "onContact",
                    "@getphonenumber": "onGetPhoneNumber",
                    "@error": "onError",
                    "@launchapp": "onLaunchApp",
                    "@opensetting": "onOpenSetting"
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { button } from '../mixins/button';\nimport { GRAY, RED } from '../common/color';\nimport { toPromise } from '../common/utils';\nimport type { Action } from './dialog';\n\nVantComponent({\n  mixins: [button],\n  classes: ['cancle-button-class', 'confirm-button-class'],\n\n  props: {\n    show: {\n      type: Boolean,\n      observer(show: boolean) {\n        !show && this.stopLoading();\n      },\n    },\n    title: String,\n    message: String,\n    theme: {\n      type: String,\n      value: 'default',\n    },\n    confirmButtonId: String,\n    className: String,\n    customStyle: String,\n    asyncClose: Boolean,\n    messageAlign: String,\n    beforeClose: null,\n    overlayStyle: String,\n    useSlot: Boolean,\n    useTitleSlot: Boolean,\n    useConfirmButtonSlot: Boolean,\n    useCancelButtonSlot: Boolean,\n    showCancelButton: Boolean,\n    closeOnClickOverlay: Boolean,\n    confirmButtonOpenType: String,\n    width: null,\n    zIndex: {\n      type: Number,\n      value: 2000,\n    },\n    confirmButtonText: {\n      type: String,\n      value: '确认',\n    },\n    cancelButtonText: {\n      type: String,\n      value: '取消',\n    },\n    confirmButtonColor: {\n      type: String,\n      value: RED,\n    },\n    cancelButtonColor: {\n      type: String,\n      value: GRAY,\n    },\n    showConfirmButton: {\n      type: Boolean,\n      value: true,\n    },\n    overlay: {\n      type: Boolean,\n      value: true,\n    },\n    transition: {\n      type: String,\n      value: 'scale',\n    },\n    rootPortal: {\n      type: Boolean,\n      value: false,\n    },\n  },\n\n  data: {\n    loading: {\n      confirm: false,\n      cancel: false,\n    },\n    callback: (() => {}) as unknown as (\n      action: string,\n      context: WechatMiniprogram.Component.TrivialInstance\n    ) => void,\n  },\n\n  methods: {\n    onConfirm() {\n      this.handleAction('confirm');\n    },\n\n    onCancel() {\n      this.handleAction('cancel');\n    },\n\n    onClickOverlay() {\n      this.close('overlay');\n    },\n\n    close(action) {\n      this.setData({ show: false });\n\n      wx.nextTick(() => {\n        this.$emit('close', action);\n\n        const { callback } = this.data;\n        if (callback) {\n          callback(action, this);\n        }\n      });\n    },\n\n    stopLoading() {\n      this.setData({\n        loading: {\n          confirm: false,\n          cancel: false,\n        },\n      });\n    },\n\n    handleAction(action: Action) {\n      this.$emit(action, { dialog: this });\n\n      const { asyncClose, beforeClose } = this.data;\n      if (!asyncClose && !beforeClose) {\n        this.close(action);\n        return;\n      }\n\n      this.setData({\n        [`loading.${action}`]: true,\n      });\n\n      if (beforeClose) {\n        toPromise(beforeClose(action)).then((value) => {\n          if (value) {\n            this.close(action);\n          } else {\n            this.stopLoading();\n          }\n        });\n      }\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { button } from '../mixins/button';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { GRAY, RED } from '../common/color';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { toPromise } from '../common/utils';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import type { Action } from './dialog';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  mixins: [button],\n  classes: ['cancle-button-class', 'confirm-button-class'],\n\n  props: {\n    show: {\n      type: Boolean,\n      observer(show: boolean) {\n        !show && this.stopLoading();\n      },\n    },\n    title: String,\n    message: String,\n    theme: {\n      type: String,\n      value: 'default',\n    },\n    confirmButtonId: String,\n    className: String,\n    customStyle: String,\n    asyncClose: Boolean,\n    messageAlign: String,\n    beforeClose: null,\n    overlayStyle: String,\n    useSlot: Boolean,\n    useTitleSlot: Boolean,\n    useConfirmButtonSlot: Boolean,\n    useCancelButtonSlot: Boolean,\n    showCancelButton: Boolean,\n    closeOnClickOverlay: Boolean,\n    confirmButtonOpenType: String,\n    width: null,\n    zIndex: {\n      type: Number,\n      value: 2000,\n    },\n    confirmButtonText: {\n      type: String,\n      value: '确认',\n    },\n    cancelButtonText: {\n      type: String,\n      value: '取消',\n    },\n    confirmButtonColor: {\n      type: String,\n      value: RED,\n    },\n    cancelButtonColor: {\n      type: String,\n      value: GRAY,\n    },\n    showConfirmButton: {\n      type: Boolean,\n      value: true,\n    },\n    overlay: {\n      type: Boolean,\n      value: true,\n    },\n    transition: {\n      type: String,\n      value: 'scale',\n    },\n    rootPortal: {\n      type: Boolean,\n      value: false,\n    },\n  },\n\n  data: {\n    loading: {\n      confirm: false,\n      cancel: false,\n    },\n    callback: (() => {}) as unknown as (\n      action: string,\n      context: WechatMiniprogram.Component.TrivialInstance\n    ) => void,\n  },\n\n  methods: {\n    onConfirm() {\n      this.handleAction('confirm');\n    },\n\n    onCancel() {\n      this.handleAction('cancel');\n    },\n\n    onClickOverlay() {\n      this.close('overlay');\n    },\n\n    close(action) {\n      this.setData({ show: false });\n\n      wx.nextTick(() => {\n        this.$emit('close', action);\n\n        const { callback } = this.data;\n        if (callback) {\n          callback(action, this);\n        }\n      });\n    },\n\n    stopLoading() {\n      this.setData({\n        loading: {\n          confirm: false,\n          cancel: false,\n        },\n      });\n    },\n\n    handleAction(action: Action) {\n      this.$emit(action, { dialog: this });\n\n      const { asyncClose, beforeClose } = this.data;\n      if (!asyncClose && !beforeClose) {\n        this.close(action);\n        return;\n      }\n\n      this.setData({\n        [`loading.${action}`]: true,\n      });\n\n      if (beforeClose) {\n        toPromise(beforeClose(action)).then((value) => {\n          if (value) {\n            this.close(action);\n          } else {\n            this.stopLoading();\n          }\n        });\n      }\n    },\n  },\n});",
        "expression": "VantComponent({\n  mixins: [button],\n  classes: ['cancle-button-class', 'confirm-button-class'],\n\n  props: {\n    show: {\n      type: Boolean,\n      observer(show: boolean) {\n        !show && this.stopLoading();\n      },\n    },\n    title: String,\n    message: String,\n    theme: {\n      type: String,\n      value: 'default',\n    },\n    confirmButtonId: String,\n    className: String,\n    customStyle: String,\n    asyncClose: Boolean,\n    messageAlign: String,\n    beforeClose: null,\n    overlayStyle: String,\n    useSlot: Boolean,\n    useTitleSlot: Boolean,\n    useConfirmButtonSlot: Boolean,\n    useCancelButtonSlot: Boolean,\n    showCancelButton: Boolean,\n    closeOnClickOverlay: Boolean,\n    confirmButtonOpenType: String,\n    width: null,\n    zIndex: {\n      type: Number,\n      value: 2000,\n    },\n    confirmButtonText: {\n      type: String,\n      value: '确认',\n    },\n    cancelButtonText: {\n      type: String,\n      value: '取消',\n    },\n    confirmButtonColor: {\n      type: String,\n      value: RED,\n    },\n    cancelButtonColor: {\n      type: String,\n      value: GRAY,\n    },\n    showConfirmButton: {\n      type: Boolean,\n      value: true,\n    },\n    overlay: {\n      type: Boolean,\n      value: true,\n    },\n    transition: {\n      type: String,\n      value: 'scale',\n    },\n    rootPortal: {\n      type: Boolean,\n      value: false,\n    },\n  },\n\n  data: {\n    loading: {\n      confirm: false,\n      cancel: false,\n    },\n    callback: (() => {}) as unknown as (\n      action: string,\n      context: WechatMiniprogram.Component.TrivialInstance\n    ) => void,\n  },\n\n  methods: {\n    onConfirm() {\n      this.handleAction('confirm');\n    },\n\n    onCancel() {\n      this.handleAction('cancel');\n    },\n\n    onClickOverlay() {\n      this.close('overlay');\n    },\n\n    close(action) {\n      this.setData({ show: false });\n\n      wx.nextTick(() => {\n        this.$emit('close', action);\n\n        const { callback } = this.data;\n        if (callback) {\n          callback(action, this);\n        }\n      });\n    },\n\n    stopLoading() {\n      this.setData({\n        loading: {\n          confirm: false,\n          cancel: false,\n        },\n      });\n    },\n\n    handleAction(action: Action) {\n      this.$emit(action, { dialog: this });\n\n      const { asyncClose, beforeClose } = this.data;\n      if (!asyncClose && !beforeClose) {\n        this.close(action);\n        return;\n      }\n\n      this.setData({\n        [`loading.${action}`]: true,\n      });\n\n      if (beforeClose) {\n        toPromise(beforeClose(action)).then((value) => {\n          if (value) {\n            this.close(action);\n          } else {\n            this.stopLoading();\n          }\n        });\n      }\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "mixins": [
              "button"
            ],
            "classes": [
              "'cancle-button-class'",
              "'confirm-button-class'"
            ],
            "props": {
              "show": {
                "type": "Boolean"
              },
              "title": "String",
              "message": "String",
              "theme": {
                "type": "String",
                "value": "default"
              },
              "confirmButtonId": "String",
              "className": "String",
              "customStyle": "String",
              "asyncClose": "Boolean",
              "messageAlign": "String",
              "beforeClose": "null",
              "overlayStyle": "String",
              "useSlot": "Boolean",
              "useTitleSlot": "Boolean",
              "useConfirmButtonSlot": "Boolean",
              "useCancelButtonSlot": "Boolean",
              "showCancelButton": "Boolean",
              "closeOnClickOverlay": "Boolean",
              "confirmButtonOpenType": "String",
              "width": "null",
              "zIndex": {
                "type": "Number",
                "value": "2000"
              },
              "confirmButtonText": {
                "type": "String",
                "value": "确认"
              },
              "cancelButtonText": {
                "type": "String",
                "value": "取消"
              },
              "confirmButtonColor": {
                "type": "String",
                "value": "RED"
              },
              "cancelButtonColor": {
                "type": "String",
                "value": "GRAY"
              },
              "showConfirmButton": {
                "type": "Boolean",
                "value": "true"
              },
              "overlay": {
                "type": "Boolean",
                "value": "true"
              },
              "transition": {
                "type": "String",
                "value": "scale"
              },
              "rootPortal": {
                "type": "Boolean",
                "value": "false"
              }
            },
            "data": {
              "loading": {
                "confirm": "false",
                "cancel": "false"
              },
              "callback": "(() => {}) as unknown as (\n      action: string,\n      context: WechatMiniprogram.Component.TrivialInstance\n    ) => void"
            },
            "methods": {
              "onConfirm": "onConfirm() {\n      this.handleAction('confirm');\n    }",
              "onCancel": "onCancel() {\n      this.handleAction('cancel');\n    }",
              "onClickOverlay": "onClickOverlay() {\n      this.close('overlay');\n    }",
              "close": "close(action) {\n      this.setData({ show: false });\n\n      wx.nextTick(() => {\n        this.$emit('close', action);\n\n        const { callback } = this.data;\n        if (callback) {\n          callback(action, this);\n        }\n      });\n    }",
              "stopLoading": "stopLoading() {\n      this.setData({\n        loading: {\n          confirm: false,\n          cancel: false,\n        },\n      });\n    }",
              "handleAction": "handleAction(action: Action) {\n      this.$emit(action, { dialog: this });\n\n      const { asyncClose, beforeClose } = this.data;\n      if (!asyncClose && !beforeClose) {\n        this.close(action);\n        return;\n      }\n\n      this.setData({\n        [`loading.${action}`]: true,\n      });\n\n      if (beforeClose) {\n        toPromise(beforeClose(action)).then((value) => {\n          if (value) {\n            this.close(action);\n          } else {\n            this.stopLoading();\n          }\n        });\n      }\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": null,
  "wxss": ".van-dialog{background-color:var(--dialog-background-color,#fff);border-radius:var(--dialog-border-radius,16px);font-size:var(--dialog-font-size,16px);overflow:hidden;top:45%!important;width:var(--dialog-width,320px)}@media (max-width:321px){.van-dialog{width:var(--dialog-small-screen-width,90%)}}.van-dialog__header{font-weight:var(--dialog-header-font-weight,500);line-height:var(--dialog-header-line-height,24px);padding-top:var(--dialog-header-padding-top,24px);text-align:center}.van-dialog__header--isolated{padding:var(--dialog-header-isolated-padding,24px 0)}.van-dialog__message{-webkit-overflow-scrolling:touch;font-size:var(--dialog-message-font-size,14px);line-height:var(--dialog-message-line-height,20px);max-height:var(--dialog-message-max-height,60vh);overflow-y:auto;padding:var(--dialog-message-padding,24px);text-align:center}.van-dialog__message-text{word-wrap:break-word}.van-dialog__message--hasTitle{color:var(--dialog-has-title-message-text-color,#646566);padding-top:var(--dialog-has-title-message-padding-top,8px)}.van-dialog__message--round-button{color:#323233;padding-bottom:16px}.van-dialog__message--left{text-align:left}.van-dialog__message--right{text-align:right}.van-dialog__message--justify{text-align:justify}.van-dialog__footer{display:flex}.van-dialog__footer--round-button{padding:8px 24px 16px!important;position:relative!important}.van-dialog__button{flex:1}.van-dialog__cancel,.van-dialog__confirm{border:0!important}.van-dialog-bounce-enter{opacity:0;transform:translate3d(-50%,-50%,0) scale(.7)}.van-dialog-bounce-leave-active{opacity:0;transform:translate3d(-50%,-50%,0) scale(.9)}"
}