{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "{{ utils.bem('checkbox', [{ horizontal: direction === 'horizontal' }]) }} custom-class"
      },
      "children": [
        {
          "tag": "div",
          "attrs": {
            "v-if": "labelPosition === 'left'",
            "class": "label-class {{ utils.bem('checkbox__label', [labelPosition, { disabled: disabled || parentDisabled }]) }}",
            "@tap": "onClickLabel"
          },
          "children": [
            {
              "tag": "slot"
            }
          ]
        },
        {
          "tag": "div",
          "attrs": {
            "class": "van-checkbox__icon-wrap",
            "@tap": "toggle"
          },
          "children": [
            {
              "tag": "slot",
              "attrs": {
                "v-if": "useIconSlot",
                "name": "icon"
              }
            },
            {
              "tag": "van-icon",
              "attrs": {
                "v-else": "",
                "name": "success",
                "size": "0.8em",
                ":class": "utils.bem('checkbox__icon', [shape, { disabled: disabled || parentDisabled, checked: value }])",
                ":style": "iconStyle",
                "custom-class": "icon-class",
                "custom-style": "line-height: 1.25em;"
              }
            }
          ]
        },
        {
          "tag": "div",
          "attrs": {
            "v-if": "labelPosition === 'right'",
            "class": "label-class {{ utils.bem('checkbox__label', [labelPosition, { disabled: disabled || parentDisabled }]) }}",
            "@tap": "onClickLabel"
          },
          "children": [
            {
              "tag": "slot"
            }
          ]
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { useParent } from '../common/relation';\nimport { VantComponent } from '../common/component';\n\nfunction emit(\n  target: WechatMiniprogram.Component.TrivialInstance,\n  value: boolean | any[]\n) {\n  target.$emit('input', value);\n  target.$emit('change', value);\n}\n\nVantComponent({\n  field: true,\n\n  relation: useParent('checkbox-group'),\n\n  classes: ['icon-class', 'label-class'],\n\n  props: {\n    value: Boolean,\n    disabled: Boolean,\n    useIconSlot: Boolean,\n    checkedColor: String,\n    labelPosition: {\n      type: String,\n      value: 'right',\n    },\n    labelDisabled: Boolean,\n    shape: {\n      type: String,\n      value: 'round',\n    },\n    iconSize: {\n      type: null,\n      value: 20,\n    },\n  },\n\n  data: {\n    parentDisabled: false,\n    direction: 'vertical',\n  },\n\n  methods: {\n    emitChange(value: boolean) {\n      if (this.parent) {\n        this.setParentValue(this.parent, value);\n      } else {\n        emit(this, value);\n      }\n    },\n\n    toggle() {\n      const { parentDisabled, disabled, value } = this.data;\n      if (!disabled && !parentDisabled) {\n        this.emitChange(!value);\n      }\n    },\n\n    onClickLabel() {\n      const { labelDisabled, parentDisabled, disabled, value } = this.data;\n      if (!disabled && !labelDisabled && !parentDisabled) {\n        this.emitChange(!value);\n      }\n    },\n\n    setParentValue(\n      parent: WechatMiniprogram.Component.TrivialInstance,\n      value: boolean\n    ) {\n      const parentValue = parent.data.value.slice();\n      const { name } = this.data;\n      const { max } = parent.data;\n\n      if (value) {\n        if (max && parentValue.length >= max) {\n          return;\n        }\n\n        if (parentValue.indexOf(name) === -1) {\n          parentValue.push(name);\n          emit(parent, parentValue);\n        }\n      } else {\n        const index = parentValue.indexOf(name);\n        if (index !== -1) {\n          parentValue.splice(index, 1);\n          emit(parent, parentValue);\n        }\n      }\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { useParent } from '../common/relation';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function emit(\n  target: WechatMiniprogram.Component.TrivialInstance,\n  value: boolean | any[]\n) {\n  target.$emit('input', value);\n  target.$emit('change', value);\n}",
        "name": "emit"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  field: true,\n\n  relation: useParent('checkbox-group'),\n\n  classes: ['icon-class', 'label-class'],\n\n  props: {\n    value: Boolean,\n    disabled: Boolean,\n    useIconSlot: Boolean,\n    checkedColor: String,\n    labelPosition: {\n      type: String,\n      value: 'right',\n    },\n    labelDisabled: Boolean,\n    shape: {\n      type: String,\n      value: 'round',\n    },\n    iconSize: {\n      type: null,\n      value: 20,\n    },\n  },\n\n  data: {\n    parentDisabled: false,\n    direction: 'vertical',\n  },\n\n  methods: {\n    emitChange(value: boolean) {\n      if (this.parent) {\n        this.setParentValue(this.parent, value);\n      } else {\n        emit(this, value);\n      }\n    },\n\n    toggle() {\n      const { parentDisabled, disabled, value } = this.data;\n      if (!disabled && !parentDisabled) {\n        this.emitChange(!value);\n      }\n    },\n\n    onClickLabel() {\n      const { labelDisabled, parentDisabled, disabled, value } = this.data;\n      if (!disabled && !labelDisabled && !parentDisabled) {\n        this.emitChange(!value);\n      }\n    },\n\n    setParentValue(\n      parent: WechatMiniprogram.Component.TrivialInstance,\n      value: boolean\n    ) {\n      const parentValue = parent.data.value.slice();\n      const { name } = this.data;\n      const { max } = parent.data;\n\n      if (value) {\n        if (max && parentValue.length >= max) {\n          return;\n        }\n\n        if (parentValue.indexOf(name) === -1) {\n          parentValue.push(name);\n          emit(parent, parentValue);\n        }\n      } else {\n        const index = parentValue.indexOf(name);\n        if (index !== -1) {\n          parentValue.splice(index, 1);\n          emit(parent, parentValue);\n        }\n      }\n    },\n  },\n});",
        "expression": "VantComponent({\n  field: true,\n\n  relation: useParent('checkbox-group'),\n\n  classes: ['icon-class', 'label-class'],\n\n  props: {\n    value: Boolean,\n    disabled: Boolean,\n    useIconSlot: Boolean,\n    checkedColor: String,\n    labelPosition: {\n      type: String,\n      value: 'right',\n    },\n    labelDisabled: Boolean,\n    shape: {\n      type: String,\n      value: 'round',\n    },\n    iconSize: {\n      type: null,\n      value: 20,\n    },\n  },\n\n  data: {\n    parentDisabled: false,\n    direction: 'vertical',\n  },\n\n  methods: {\n    emitChange(value: boolean) {\n      if (this.parent) {\n        this.setParentValue(this.parent, value);\n      } else {\n        emit(this, value);\n      }\n    },\n\n    toggle() {\n      const { parentDisabled, disabled, value } = this.data;\n      if (!disabled && !parentDisabled) {\n        this.emitChange(!value);\n      }\n    },\n\n    onClickLabel() {\n      const { labelDisabled, parentDisabled, disabled, value } = this.data;\n      if (!disabled && !labelDisabled && !parentDisabled) {\n        this.emitChange(!value);\n      }\n    },\n\n    setParentValue(\n      parent: WechatMiniprogram.Component.TrivialInstance,\n      value: boolean\n    ) {\n      const parentValue = parent.data.value.slice();\n      const { name } = this.data;\n      const { max } = parent.data;\n\n      if (value) {\n        if (max && parentValue.length >= max) {\n          return;\n        }\n\n        if (parentValue.indexOf(name) === -1) {\n          parentValue.push(name);\n          emit(parent, parentValue);\n        }\n      } else {\n        const index = parentValue.indexOf(name);\n        if (index !== -1) {\n          parentValue.splice(index, 1);\n          emit(parent, parentValue);\n        }\n      }\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "field": "true",
            "relation": "useParent('checkbox-group')",
            "classes": [
              "'icon-class'",
              "'label-class'"
            ],
            "props": {
              "value": "Boolean",
              "disabled": "Boolean",
              "useIconSlot": "Boolean",
              "checkedColor": "String",
              "labelPosition": {
                "type": "String",
                "value": "right"
              },
              "labelDisabled": "Boolean",
              "shape": {
                "type": "String",
                "value": "round"
              },
              "iconSize": {
                "type": "null",
                "value": "20"
              }
            },
            "data": {
              "parentDisabled": "false",
              "direction": "vertical"
            },
            "methods": {
              "emitChange": "emitChange(value: boolean) {\n      if (this.parent) {\n        this.setParentValue(this.parent, value);\n      } else {\n        emit(this, value);\n      }\n    }",
              "toggle": "toggle() {\n      const { parentDisabled, disabled, value } = this.data;\n      if (!disabled && !parentDisabled) {\n        this.emitChange(!value);\n      }\n    }",
              "onClickLabel": "onClickLabel() {\n      const { labelDisabled, parentDisabled, disabled, value } = this.data;\n      if (!disabled && !labelDisabled && !parentDisabled) {\n        this.emitChange(!value);\n      }\n    }",
              "setParentValue": "setParentValue(\n      parent: WechatMiniprogram.Component.TrivialInstance,\n      value: boolean\n    ) {\n      const parentValue = parent.data.value.slice();\n      const { name } = this.data;\n      const { max } = parent.data;\n\n      if (value) {\n        if (max && parentValue.length >= max) {\n          return;\n        }\n\n        if (parentValue.indexOf(name) === -1) {\n          parentValue.push(name);\n          emit(parent, parentValue);\n        }\n      } else {\n        const index = parentValue.indexOf(name);\n        if (index !== -1) {\n          parentValue.splice(index, 1);\n          emit(parent, parentValue);\n        }\n      }\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "var style = require('../wxs/style.wxs');\nvar addUnit = require('../wxs/add-unit.wxs');\n\nfunction iconStyle(checkedColor, value, disabled, parentDisabled, iconSize) {\n  var styles = {\n    'font-size': addUnit(iconSize),\n  };\n\n  if (checkedColor && value && !disabled && !parentDisabled) {\n    styles['border-color'] = checkedColor;\n    styles['background-color'] = checkedColor;\n  }\n\n  return style(styles);\n}\n\nmodule.exports = {\n  iconStyle: iconStyle,\n};\n",
    "statements": [
      {
        "kind": "FirstStatement",
        "text": "var style = require('../wxs/style.wxs');"
      },
      {
        "kind": "FirstStatement",
        "text": "var addUnit = require('../wxs/add-unit.wxs');"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function iconStyle(checkedColor, value, disabled, parentDisabled, iconSize) {\n  var styles = {\n    'font-size': addUnit(iconSize),\n  };\n\n  if (checkedColor && value && !disabled && !parentDisabled) {\n    styles['border-color'] = checkedColor;\n    styles['background-color'] = checkedColor;\n  }\n\n  return style(styles);\n}",
        "name": "iconStyle"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  iconStyle: iconStyle,\n};",
        "expression": "module.exports = {\n  iconStyle: iconStyle,\n}"
      }
    ]
  },
  "wxss": ".van-checkbox{align-items:center;display:flex;overflow:hidden;-webkit-user-select:none;user-select:none}.van-checkbox--horizontal{margin-right:12px}.van-checkbox__icon-wrap,.van-checkbox__label{line-height:var(--checkbox-size,20px)}.van-checkbox__icon-wrap{flex:none}.van-checkbox__icon{align-items:center;border:1px solid var(--checkbox-border-color,#c8c9cc);box-sizing:border-box;color:transparent;display:flex;font-size:var(--checkbox-size,20px);height:1em;justify-content:center;text-align:center;transition-duration:var(--checkbox-transition-duration,.2s);transition-property:color,border-color,background-color;width:1em}.van-checkbox__icon--round{border-radius:100%}.van-checkbox__icon--checked{background-color:var(--checkbox-checked-icon-color,#1989fa);border-color:var(--checkbox-checked-icon-color,#1989fa);color:#fff}.van-checkbox__icon--disabled{background-color:var(--checkbox-disabled-background-color,#ebedf0);border-color:var(--checkbox-disabled-icon-color,#c8c9cc)}.van-checkbox__icon--disabled.van-checkbox__icon--checked{color:var(--checkbox-disabled-icon-color,#c8c9cc)}.van-checkbox__label{word-wrap:break-word;color:var(--checkbox-label-color,#323233);padding-left:var(--checkbox-label-margin,10px)}.van-checkbox__label--left{float:left;margin:0 var(--checkbox-label-margin,10px) 0 0}.van-checkbox__label--disabled{color:var(--checkbox-disabled-label-color,#c8c9cc)}.van-checkbox__label:empty{margin:0}"
}