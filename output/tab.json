{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "custom-class {{ utils.bem('tab__pane', { active, inactive: !active }) }}",
        ":style": "shouldShow ? '' : 'display: none;'"
      },
      "children": [
        {
          "tag": "slot",
          "attrs": {
            "v-if": "shouldRender"
          }
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { useParent } from '../common/relation';\nimport { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: useParent('tabs'),\n\n  props: {\n    dot: {\n      type: Boolean,\n      observer: 'update',\n    },\n    info: {\n      type: null,\n      observer: 'update',\n    },\n    title: {\n      type: String,\n      observer: 'update',\n    },\n    disabled: {\n      type: Boolean,\n      observer: 'update',\n    },\n    titleStyle: {\n      type: String,\n      observer: 'update',\n    },\n    name: {\n      type: null,\n      value: '',\n    },\n  },\n\n  data: {\n    active: false,\n  },\n\n  methods: {\n    getComputedName() {\n      if (this.data.name !== '') {\n        return this.data.name;\n      }\n      return this.index;\n    },\n\n    updateRender(active, parent) {\n      const { data: parentData } = parent;\n\n      this.inited = this.inited || active;\n      this.setData({\n        active,\n        shouldRender: this.inited || !parentData.lazyRender,\n        shouldShow: active || parentData.animated,\n      });\n    },\n\n    update() {\n      if (this.parent) {\n        this.parent.updateTabs();\n      }\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { useParent } from '../common/relation';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  relation: useParent('tabs'),\n\n  props: {\n    dot: {\n      type: Boolean,\n      observer: 'update',\n    },\n    info: {\n      type: null,\n      observer: 'update',\n    },\n    title: {\n      type: String,\n      observer: 'update',\n    },\n    disabled: {\n      type: Boolean,\n      observer: 'update',\n    },\n    titleStyle: {\n      type: String,\n      observer: 'update',\n    },\n    name: {\n      type: null,\n      value: '',\n    },\n  },\n\n  data: {\n    active: false,\n  },\n\n  methods: {\n    getComputedName() {\n      if (this.data.name !== '') {\n        return this.data.name;\n      }\n      return this.index;\n    },\n\n    updateRender(active, parent) {\n      const { data: parentData } = parent;\n\n      this.inited = this.inited || active;\n      this.setData({\n        active,\n        shouldRender: this.inited || !parentData.lazyRender,\n        shouldShow: active || parentData.animated,\n      });\n    },\n\n    update() {\n      if (this.parent) {\n        this.parent.updateTabs();\n      }\n    },\n  },\n});",
        "expression": "VantComponent({\n  relation: useParent('tabs'),\n\n  props: {\n    dot: {\n      type: Boolean,\n      observer: 'update',\n    },\n    info: {\n      type: null,\n      observer: 'update',\n    },\n    title: {\n      type: String,\n      observer: 'update',\n    },\n    disabled: {\n      type: Boolean,\n      observer: 'update',\n    },\n    titleStyle: {\n      type: String,\n      observer: 'update',\n    },\n    name: {\n      type: null,\n      value: '',\n    },\n  },\n\n  data: {\n    active: false,\n  },\n\n  methods: {\n    getComputedName() {\n      if (this.data.name !== '') {\n        return this.data.name;\n      }\n      return this.index;\n    },\n\n    updateRender(active, parent) {\n      const { data: parentData } = parent;\n\n      this.inited = this.inited || active;\n      this.setData({\n        active,\n        shouldRender: this.inited || !parentData.lazyRender,\n        shouldShow: active || parentData.animated,\n      });\n    },\n\n    update() {\n      if (this.parent) {\n        this.parent.updateTabs();\n      }\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "relation": "useParent('tabs')",
            "props": {
              "dot": {
                "type": "Boolean",
                "observer": "update"
              },
              "info": {
                "type": "null",
                "observer": "update"
              },
              "title": {
                "type": "String",
                "observer": "update"
              },
              "disabled": {
                "type": "Boolean",
                "observer": "update"
              },
              "titleStyle": {
                "type": "String",
                "observer": "update"
              },
              "name": {
                "type": "null",
                "value": ""
              }
            },
            "data": {
              "active": "false"
            },
            "methods": {
              "getComputedName": "getComputedName() {\n      if (this.data.name !== '') {\n        return this.data.name;\n      }\n      return this.index;\n    }",
              "updateRender": "updateRender(active, parent) {\n      const { data: parentData } = parent;\n\n      this.inited = this.inited || active;\n      this.setData({\n        active,\n        shouldRender: this.inited || !parentData.lazyRender,\n        shouldShow: active || parentData.animated,\n      });\n    }",
              "update": "update() {\n      if (this.parent) {\n        this.parent.updateTabs();\n      }\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": null,
  "wxss": ":host{box-sizing:border-box;flex-shrink:0;width:100%}.van-tab__pane{-webkit-overflow-scrolling:touch;box-sizing:border-box;overflow-y:auto}.van-tab__pane--active{height:auto}.van-tab__pane--inactive{height:0;overflow:visible}"
}