{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "van-grid custom-class {{ border && !gutter ? 'van-hairline--top' : '' }}",
        ":style": "rootStyle"
      },
      "children": [
        {
          "tag": "slot"
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { useChildren } from '../common/relation';\n\nVantComponent({\n  relation: useChildren('grid-item'),\n\n  props: {\n    square: {\n      type: Boolean,\n      observer: 'updateChildren',\n    },\n    gutter: {\n      type: null,\n      value: 0,\n      observer: 'updateChildren',\n    },\n    clickable: {\n      type: Boolean,\n      observer: 'updateChildren',\n    },\n    columnNum: {\n      type: Number,\n      value: 4,\n      observer: 'updateChildren',\n    },\n    center: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildren',\n    },\n    border: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildren',\n    },\n    direction: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    iconSize: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    reverse: {\n      type: Boolean,\n      value: false,\n      observer: 'updateChildren',\n    },\n  },\n\n  methods: {\n    updateChildren() {\n      this.children.forEach((child) => {\n        child.updateStyle();\n      });\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { useChildren } from '../common/relation';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  relation: useChildren('grid-item'),\n\n  props: {\n    square: {\n      type: Boolean,\n      observer: 'updateChildren',\n    },\n    gutter: {\n      type: null,\n      value: 0,\n      observer: 'updateChildren',\n    },\n    clickable: {\n      type: Boolean,\n      observer: 'updateChildren',\n    },\n    columnNum: {\n      type: Number,\n      value: 4,\n      observer: 'updateChildren',\n    },\n    center: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildren',\n    },\n    border: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildren',\n    },\n    direction: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    iconSize: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    reverse: {\n      type: Boolean,\n      value: false,\n      observer: 'updateChildren',\n    },\n  },\n\n  methods: {\n    updateChildren() {\n      this.children.forEach((child) => {\n        child.updateStyle();\n      });\n    },\n  },\n});",
        "expression": "VantComponent({\n  relation: useChildren('grid-item'),\n\n  props: {\n    square: {\n      type: Boolean,\n      observer: 'updateChildren',\n    },\n    gutter: {\n      type: null,\n      value: 0,\n      observer: 'updateChildren',\n    },\n    clickable: {\n      type: Boolean,\n      observer: 'updateChildren',\n    },\n    columnNum: {\n      type: Number,\n      value: 4,\n      observer: 'updateChildren',\n    },\n    center: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildren',\n    },\n    border: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildren',\n    },\n    direction: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    iconSize: {\n      type: String,\n      observer: 'updateChildren',\n    },\n    reverse: {\n      type: Boolean,\n      value: false,\n      observer: 'updateChildren',\n    },\n  },\n\n  methods: {\n    updateChildren() {\n      this.children.forEach((child) => {\n        child.updateStyle();\n      });\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "relation": "useChildren('grid-item')",
            "props": {
              "square": {
                "type": "Boolean",
                "observer": "updateChildren"
              },
              "gutter": {
                "type": "null",
                "value": "0",
                "observer": "updateChildren"
              },
              "clickable": {
                "type": "Boolean",
                "observer": "updateChildren"
              },
              "columnNum": {
                "type": "Number",
                "value": "4",
                "observer": "updateChildren"
              },
              "center": {
                "type": "Boolean",
                "value": "true",
                "observer": "updateChildren"
              },
              "border": {
                "type": "Boolean",
                "value": "true",
                "observer": "updateChildren"
              },
              "direction": {
                "type": "String",
                "observer": "updateChildren"
              },
              "iconSize": {
                "type": "String",
                "observer": "updateChildren"
              },
              "reverse": {
                "type": "Boolean",
                "value": "false",
                "observer": "updateChildren"
              }
            },
            "methods": {
              "updateChildren": "updateChildren() {\n      this.children.forEach((child) => {\n        child.updateStyle();\n      });\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "var style = require('../wxs/style.wxs');\nvar addUnit = require('../wxs/add-unit.wxs');\n\nfunction rootStyle(data) {\n  return style({\n    'padding-left': addUnit(data.gutter),\n  });\n}\n\nmodule.exports = {\n  rootStyle: rootStyle,\n};\n",
    "statements": [
      {
        "kind": "FirstStatement",
        "text": "var style = require('../wxs/style.wxs');"
      },
      {
        "kind": "FirstStatement",
        "text": "var addUnit = require('../wxs/add-unit.wxs');"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function rootStyle(data) {\n  return style({\n    'padding-left': addUnit(data.gutter),\n  });\n}",
        "name": "rootStyle"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  rootStyle: rootStyle,\n};",
        "expression": "module.exports = {\n  rootStyle: rootStyle,\n}"
      }
    ]
  },
  "wxss": ".van-grid{box-sizing:border-box;overflow:hidden;position:relative}"
}