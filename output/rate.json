{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "{{ utils.bem('rate') }} custom-class",
        "@touchmove": "onTouchMove"
      },
      "children": [
        {
          "tag": "div",
          "attrs": {
            ":class": "bem('rate__item')",
            "v-for": "innerCountArray",
            ":key": "index",
            ":style": "style({ paddingRight: index !== count - 1 ? utils.addUnit(gutter) : null })"
          },
          "children": [
            {
              "tag": "van-icon",
              "attrs": {
                ":name": "index + 1 <= innerValue ? icon : voidIcon",
                ":style": "style({ fontSize: utils.addUnit(size) })",
                "custom-class": "{{ utils.bem('rate__icon', [{ disabled, full: index + 1 <= innerValue }])}} icon-class",
                ":data-score": "index",
                ":color": "disabled ? disabledColor : index + 1 <= innerValue ? color : voidColor",
                "@click": "onSelect"
              }
            },
            {
              "tag": "van-icon",
              "attrs": {
                "v-if": "allowHalf",
                ":name": "index + 0.5 <= innerValue ? icon : voidIcon",
                ":style": "style({ fontSize: utils.addUnit(size) })",
                "custom-class": "{{ utils.bem('rate__icon', ['half', { disabled, full: index + 0.5 <= innerValue }]) }} icon-class",
                ":data-score": "index - 0.5",
                ":color": "disabled ? disabledColor : index + 0.5 <= innerValue ? color : voidColor",
                "@click": "onSelect"
              }
            }
          ]
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { getAllRect } from '../common/utils';\nimport { VantComponent } from '../common/component';\nimport { canIUseModel } from '../common/version';\n\nVantComponent({\n  field: true,\n\n  classes: ['icon-class'],\n\n  props: {\n    value: {\n      type: Number,\n      observer(value: number) {\n        if (value !== this.data.innerValue) {\n          this.setData({ innerValue: value });\n        }\n      },\n    },\n    readonly: Boolean,\n    disabled: Boolean,\n    allowHalf: Boolean,\n    size: null,\n    icon: {\n      type: String,\n      value: 'star',\n    },\n    voidIcon: {\n      type: String,\n      value: 'star-o',\n    },\n    color: String,\n    voidColor: String,\n    disabledColor: String,\n    count: {\n      type: Number,\n      value: 5,\n      observer(value: number) {\n        this.setData({ innerCountArray: Array.from({ length: value }) });\n      },\n    },\n    gutter: null,\n    touchable: {\n      type: Boolean,\n      value: true,\n    },\n  },\n\n  data: {\n    innerValue: 0,\n    innerCountArray: Array.from({ length: 5 }),\n  },\n\n  methods: {\n    onSelect(event: WechatMiniprogram.CustomEvent) {\n      const { data } = this;\n      const { score } = event.currentTarget.dataset;\n      if (!data.disabled && !data.readonly) {\n        this.setData({ innerValue: score + 1 });\n\n        if (canIUseModel()) {\n          this.setData({ value: score + 1 });\n        }\n\n        wx.nextTick(() => {\n          this.$emit('input', score + 1);\n          this.$emit('change', score + 1);\n        });\n      }\n    },\n\n    onTouchMove(event: WechatMiniprogram.TouchEvent) {\n      const { touchable } = this.data;\n      if (!touchable) return;\n\n      const { clientX } = event.touches[0];\n\n      getAllRect(this, '.van-rate__icon').then((list) => {\n        const target = list\n          .sort((cur, next) => cur.dataset.score - next.dataset.score)\n          .find((item) => clientX >= item.left && clientX <= item.right);\n\n        if (target != null) {\n          this.onSelect({\n            ...event,\n            currentTarget: (target as unknown) as WechatMiniprogram.Target,\n          });\n        }\n      });\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { getAllRect } from '../common/utils';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { canIUseModel } from '../common/version';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  field: true,\n\n  classes: ['icon-class'],\n\n  props: {\n    value: {\n      type: Number,\n      observer(value: number) {\n        if (value !== this.data.innerValue) {\n          this.setData({ innerValue: value });\n        }\n      },\n    },\n    readonly: Boolean,\n    disabled: Boolean,\n    allowHalf: Boolean,\n    size: null,\n    icon: {\n      type: String,\n      value: 'star',\n    },\n    voidIcon: {\n      type: String,\n      value: 'star-o',\n    },\n    color: String,\n    voidColor: String,\n    disabledColor: String,\n    count: {\n      type: Number,\n      value: 5,\n      observer(value: number) {\n        this.setData({ innerCountArray: Array.from({ length: value }) });\n      },\n    },\n    gutter: null,\n    touchable: {\n      type: Boolean,\n      value: true,\n    },\n  },\n\n  data: {\n    innerValue: 0,\n    innerCountArray: Array.from({ length: 5 }),\n  },\n\n  methods: {\n    onSelect(event: WechatMiniprogram.CustomEvent) {\n      const { data } = this;\n      const { score } = event.currentTarget.dataset;\n      if (!data.disabled && !data.readonly) {\n        this.setData({ innerValue: score + 1 });\n\n        if (canIUseModel()) {\n          this.setData({ value: score + 1 });\n        }\n\n        wx.nextTick(() => {\n          this.$emit('input', score + 1);\n          this.$emit('change', score + 1);\n        });\n      }\n    },\n\n    onTouchMove(event: WechatMiniprogram.TouchEvent) {\n      const { touchable } = this.data;\n      if (!touchable) return;\n\n      const { clientX } = event.touches[0];\n\n      getAllRect(this, '.van-rate__icon').then((list) => {\n        const target = list\n          .sort((cur, next) => cur.dataset.score - next.dataset.score)\n          .find((item) => clientX >= item.left && clientX <= item.right);\n\n        if (target != null) {\n          this.onSelect({\n            ...event,\n            currentTarget: (target as unknown) as WechatMiniprogram.Target,\n          });\n        }\n      });\n    },\n  },\n});",
        "expression": "VantComponent({\n  field: true,\n\n  classes: ['icon-class'],\n\n  props: {\n    value: {\n      type: Number,\n      observer(value: number) {\n        if (value !== this.data.innerValue) {\n          this.setData({ innerValue: value });\n        }\n      },\n    },\n    readonly: Boolean,\n    disabled: Boolean,\n    allowHalf: Boolean,\n    size: null,\n    icon: {\n      type: String,\n      value: 'star',\n    },\n    voidIcon: {\n      type: String,\n      value: 'star-o',\n    },\n    color: String,\n    voidColor: String,\n    disabledColor: String,\n    count: {\n      type: Number,\n      value: 5,\n      observer(value: number) {\n        this.setData({ innerCountArray: Array.from({ length: value }) });\n      },\n    },\n    gutter: null,\n    touchable: {\n      type: Boolean,\n      value: true,\n    },\n  },\n\n  data: {\n    innerValue: 0,\n    innerCountArray: Array.from({ length: 5 }),\n  },\n\n  methods: {\n    onSelect(event: WechatMiniprogram.CustomEvent) {\n      const { data } = this;\n      const { score } = event.currentTarget.dataset;\n      if (!data.disabled && !data.readonly) {\n        this.setData({ innerValue: score + 1 });\n\n        if (canIUseModel()) {\n          this.setData({ value: score + 1 });\n        }\n\n        wx.nextTick(() => {\n          this.$emit('input', score + 1);\n          this.$emit('change', score + 1);\n        });\n      }\n    },\n\n    onTouchMove(event: WechatMiniprogram.TouchEvent) {\n      const { touchable } = this.data;\n      if (!touchable) return;\n\n      const { clientX } = event.touches[0];\n\n      getAllRect(this, '.van-rate__icon').then((list) => {\n        const target = list\n          .sort((cur, next) => cur.dataset.score - next.dataset.score)\n          .find((item) => clientX >= item.left && clientX <= item.right);\n\n        if (target != null) {\n          this.onSelect({\n            ...event,\n            currentTarget: (target as unknown) as WechatMiniprogram.Target,\n          });\n        }\n      });\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "field": "true",
            "classes": [
              "'icon-class'"
            ],
            "props": {
              "value": {
                "type": "Number"
              },
              "readonly": "Boolean",
              "disabled": "Boolean",
              "allowHalf": "Boolean",
              "size": "null",
              "icon": {
                "type": "String",
                "value": "star"
              },
              "voidIcon": {
                "type": "String",
                "value": "star-o"
              },
              "color": "String",
              "voidColor": "String",
              "disabledColor": "String",
              "count": {
                "type": "Number",
                "value": "5"
              },
              "gutter": "null",
              "touchable": {
                "type": "Boolean",
                "value": "true"
              }
            },
            "data": {
              "innerValue": "0",
              "innerCountArray": "Array.from({ length: 5 })"
            },
            "methods": {
              "onSelect": "onSelect(event: WechatMiniprogram.CustomEvent) {\n      const { data } = this;\n      const { score } = event.currentTarget.dataset;\n      if (!data.disabled && !data.readonly) {\n        this.setData({ innerValue: score + 1 });\n\n        if (canIUseModel()) {\n          this.setData({ value: score + 1 });\n        }\n\n        wx.nextTick(() => {\n          this.$emit('input', score + 1);\n          this.$emit('change', score + 1);\n        });\n      }\n    }",
              "onTouchMove": "onTouchMove(event: WechatMiniprogram.TouchEvent) {\n      const { touchable } = this.data;\n      if (!touchable) return;\n\n      const { clientX } = event.touches[0];\n\n      getAllRect(this, '.van-rate__icon').then((list) => {\n        const target = list\n          .sort((cur, next) => cur.dataset.score - next.dataset.score)\n          .find((item) => clientX >= item.left && clientX <= item.right);\n\n        if (target != null) {\n          this.onSelect({\n            ...event,\n            currentTarget: (target as unknown) as WechatMiniprogram.Target,\n          });\n        }\n      });\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": null,
  "wxss": ".van-rate{display:inline-flex;-webkit-user-select:none;user-select:none}.van-rate__item{padding:0 var(--rate-horizontal-padding,2px);position:relative}.van-rate__item:not(:last-child){padding-right:var(--rate-icon-gutter,4px)}.van-rate__icon{color:var(--rate-icon-void-color,#c8c9cc);display:block;font-size:var(--rate-icon-size,20px);height:100%}.van-rate__icon--half{left:var(--rate-horizontal-padding,2px);overflow:hidden;position:absolute;top:0;width:.5em}.van-rate__icon--full,.van-rate__icon--half{color:var(--rate-icon-full-color,#ee0a24)}.van-rate__icon--disabled{color:var(--rate-icon-disabled-color,#c8c9cc)}"
}