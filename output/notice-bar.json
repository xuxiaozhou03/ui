{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "v-if": "show",
        "class": "custom-class {{ utils.bem('notice-bar', { withicon: mode, wrapable }) }}",
        ":style": "rootStyle",
        "@tap": "onClick"
      },
      "children": [
        {
          "tag": "van-icon",
          "attrs": {
            "v-if": "leftIcon",
            ":name": "leftIcon",
            "class": "van-notice-bar__left-icon"
          }
        },
        {
          "tag": "slot",
          "attrs": {
            "v-else": "",
            "name": "left-icon"
          }
        },
        {
          "tag": "div",
          "attrs": {
            "class": "van-notice-bar__wrap"
          },
          "children": [
            {
              "tag": "div",
              "attrs": {
                "class": "van-notice-bar__content {{ scrollable === false && !wrapable ? 'van-ellipsis' : '' }}",
                ":animation": "animationData"
              },
              "children": [
                {
                  "tag": "slot",
                  "attrs": {
                    "v-if": "!text"
                  }
                }
              ]
            }
          ]
        },
        {
          "tag": "van-icon",
          "attrs": {
            "v-if": "mode === 'closeable'",
            "class": "van-notice-bar__right-icon",
            "name": "cross",
            "@catch:tap": "onClickIcon"
          }
        },
        {
          "tag": "navigator",
          "attrs": {
            "v-else-if": "mode === 'link'",
            ":url": "url",
            ":open-type": "openType"
          },
          "children": [
            {
              "tag": "van-icon",
              "attrs": {
                "class": "van-notice-bar__right-icon",
                "name": "arrow"
              }
            }
          ]
        },
        {
          "tag": "slot",
          "attrs": {
            "v-else": "",
            "name": "right-icon"
          }
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { getRect, requestAnimationFrame } from '../common/utils';\n\nVantComponent({\n  props: {\n    text: {\n      type: String,\n      value: '',\n      observer: 'init',\n    },\n    mode: {\n      type: String,\n      value: '',\n    },\n    url: {\n      type: String,\n      value: '',\n    },\n    openType: {\n      type: String,\n      value: 'navigate',\n    },\n    delay: {\n      type: Number,\n      value: 1,\n    },\n    speed: {\n      type: Number,\n      value: 60,\n      observer: 'init',\n    },\n    scrollable: null,\n    leftIcon: {\n      type: String,\n      value: '',\n    },\n    color: String,\n    backgroundColor: String,\n    background: String,\n    wrapable: Boolean,\n  },\n\n  data: {\n    show: true,\n  },\n\n  created() {\n    this.resetAnimation = wx.createAnimation({\n      duration: 0,\n      timingFunction: 'linear',\n    });\n  },\n\n  destroyed() {\n    this.timer && clearTimeout(this.timer);\n  },\n\n  mounted() {\n    this.init();\n  },\n\n  methods: {\n    init() {\n      requestAnimationFrame(() => {\n        Promise.all([\n          getRect(this, '.van-notice-bar__content'),\n          getRect(this, '.van-notice-bar__wrap'),\n        ]).then((rects) => {\n          const [contentRect, wrapRect] = rects;\n          const { speed, scrollable, delay } = this.data;\n          if (\n            contentRect == null ||\n            wrapRect == null ||\n            !contentRect.width ||\n            !wrapRect.width ||\n            scrollable === false\n          ) {\n            return;\n          }\n\n          if (scrollable || wrapRect.width < contentRect.width) {\n            const duration =\n              ((wrapRect.width + contentRect.width) / speed) * 1000;\n\n            this.wrapWidth = wrapRect.width;\n            this.contentWidth = contentRect.width;\n            this.duration = duration;\n            this.animation = wx.createAnimation({\n              duration,\n              timingFunction: 'linear',\n              delay,\n            });\n\n            this.scroll(true);\n          }\n        });\n      });\n    },\n\n    scroll(isInit = false) {\n      this.timer && clearTimeout(this.timer);\n      this.timer = null;\n\n      this.setData({\n        animationData: this.resetAnimation\n          .translateX(isInit ? 0 : this.wrapWidth)\n          .step()\n          .export(),\n      });\n\n      requestAnimationFrame(() => {\n        this.setData({\n          animationData: this.animation\n            .translateX(-this.contentWidth)\n            .step()\n            .export(),\n        });\n      });\n\n      this.timer = setTimeout(() => {\n        this.scroll();\n      }, this.duration + this.data.delay);\n    },\n\n    onClickIcon(event) {\n      if (this.data.mode === 'closeable') {\n        this.timer && clearTimeout(this.timer);\n        this.timer = null;\n\n        this.setData({ show: false });\n        this.$emit('close', event.detail);\n      }\n    },\n\n    onClick(event: WechatMiniprogram.TouchEvent) {\n      this.$emit('click', event);\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { getRect, requestAnimationFrame } from '../common/utils';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  props: {\n    text: {\n      type: String,\n      value: '',\n      observer: 'init',\n    },\n    mode: {\n      type: String,\n      value: '',\n    },\n    url: {\n      type: String,\n      value: '',\n    },\n    openType: {\n      type: String,\n      value: 'navigate',\n    },\n    delay: {\n      type: Number,\n      value: 1,\n    },\n    speed: {\n      type: Number,\n      value: 60,\n      observer: 'init',\n    },\n    scrollable: null,\n    leftIcon: {\n      type: String,\n      value: '',\n    },\n    color: String,\n    backgroundColor: String,\n    background: String,\n    wrapable: Boolean,\n  },\n\n  data: {\n    show: true,\n  },\n\n  created() {\n    this.resetAnimation = wx.createAnimation({\n      duration: 0,\n      timingFunction: 'linear',\n    });\n  },\n\n  destroyed() {\n    this.timer && clearTimeout(this.timer);\n  },\n\n  mounted() {\n    this.init();\n  },\n\n  methods: {\n    init() {\n      requestAnimationFrame(() => {\n        Promise.all([\n          getRect(this, '.van-notice-bar__content'),\n          getRect(this, '.van-notice-bar__wrap'),\n        ]).then((rects) => {\n          const [contentRect, wrapRect] = rects;\n          const { speed, scrollable, delay } = this.data;\n          if (\n            contentRect == null ||\n            wrapRect == null ||\n            !contentRect.width ||\n            !wrapRect.width ||\n            scrollable === false\n          ) {\n            return;\n          }\n\n          if (scrollable || wrapRect.width < contentRect.width) {\n            const duration =\n              ((wrapRect.width + contentRect.width) / speed) * 1000;\n\n            this.wrapWidth = wrapRect.width;\n            this.contentWidth = contentRect.width;\n            this.duration = duration;\n            this.animation = wx.createAnimation({\n              duration,\n              timingFunction: 'linear',\n              delay,\n            });\n\n            this.scroll(true);\n          }\n        });\n      });\n    },\n\n    scroll(isInit = false) {\n      this.timer && clearTimeout(this.timer);\n      this.timer = null;\n\n      this.setData({\n        animationData: this.resetAnimation\n          .translateX(isInit ? 0 : this.wrapWidth)\n          .step()\n          .export(),\n      });\n\n      requestAnimationFrame(() => {\n        this.setData({\n          animationData: this.animation\n            .translateX(-this.contentWidth)\n            .step()\n            .export(),\n        });\n      });\n\n      this.timer = setTimeout(() => {\n        this.scroll();\n      }, this.duration + this.data.delay);\n    },\n\n    onClickIcon(event) {\n      if (this.data.mode === 'closeable') {\n        this.timer && clearTimeout(this.timer);\n        this.timer = null;\n\n        this.setData({ show: false });\n        this.$emit('close', event.detail);\n      }\n    },\n\n    onClick(event: WechatMiniprogram.TouchEvent) {\n      this.$emit('click', event);\n    },\n  },\n});",
        "expression": "VantComponent({\n  props: {\n    text: {\n      type: String,\n      value: '',\n      observer: 'init',\n    },\n    mode: {\n      type: String,\n      value: '',\n    },\n    url: {\n      type: String,\n      value: '',\n    },\n    openType: {\n      type: String,\n      value: 'navigate',\n    },\n    delay: {\n      type: Number,\n      value: 1,\n    },\n    speed: {\n      type: Number,\n      value: 60,\n      observer: 'init',\n    },\n    scrollable: null,\n    leftIcon: {\n      type: String,\n      value: '',\n    },\n    color: String,\n    backgroundColor: String,\n    background: String,\n    wrapable: Boolean,\n  },\n\n  data: {\n    show: true,\n  },\n\n  created() {\n    this.resetAnimation = wx.createAnimation({\n      duration: 0,\n      timingFunction: 'linear',\n    });\n  },\n\n  destroyed() {\n    this.timer && clearTimeout(this.timer);\n  },\n\n  mounted() {\n    this.init();\n  },\n\n  methods: {\n    init() {\n      requestAnimationFrame(() => {\n        Promise.all([\n          getRect(this, '.van-notice-bar__content'),\n          getRect(this, '.van-notice-bar__wrap'),\n        ]).then((rects) => {\n          const [contentRect, wrapRect] = rects;\n          const { speed, scrollable, delay } = this.data;\n          if (\n            contentRect == null ||\n            wrapRect == null ||\n            !contentRect.width ||\n            !wrapRect.width ||\n            scrollable === false\n          ) {\n            return;\n          }\n\n          if (scrollable || wrapRect.width < contentRect.width) {\n            const duration =\n              ((wrapRect.width + contentRect.width) / speed) * 1000;\n\n            this.wrapWidth = wrapRect.width;\n            this.contentWidth = contentRect.width;\n            this.duration = duration;\n            this.animation = wx.createAnimation({\n              duration,\n              timingFunction: 'linear',\n              delay,\n            });\n\n            this.scroll(true);\n          }\n        });\n      });\n    },\n\n    scroll(isInit = false) {\n      this.timer && clearTimeout(this.timer);\n      this.timer = null;\n\n      this.setData({\n        animationData: this.resetAnimation\n          .translateX(isInit ? 0 : this.wrapWidth)\n          .step()\n          .export(),\n      });\n\n      requestAnimationFrame(() => {\n        this.setData({\n          animationData: this.animation\n            .translateX(-this.contentWidth)\n            .step()\n            .export(),\n        });\n      });\n\n      this.timer = setTimeout(() => {\n        this.scroll();\n      }, this.duration + this.data.delay);\n    },\n\n    onClickIcon(event) {\n      if (this.data.mode === 'closeable') {\n        this.timer && clearTimeout(this.timer);\n        this.timer = null;\n\n        this.setData({ show: false });\n        this.$emit('close', event.detail);\n      }\n    },\n\n    onClick(event: WechatMiniprogram.TouchEvent) {\n      this.$emit('click', event);\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "props": {
              "text": {
                "type": "String",
                "value": "",
                "observer": "init"
              },
              "mode": {
                "type": "String",
                "value": ""
              },
              "url": {
                "type": "String",
                "value": ""
              },
              "openType": {
                "type": "String",
                "value": "navigate"
              },
              "delay": {
                "type": "Number",
                "value": "1"
              },
              "speed": {
                "type": "Number",
                "value": "60",
                "observer": "init"
              },
              "scrollable": "null",
              "leftIcon": {
                "type": "String",
                "value": ""
              },
              "color": "String",
              "backgroundColor": "String",
              "background": "String",
              "wrapable": "Boolean"
            },
            "data": {
              "show": "true"
            },
            "methods": {
              "init": "init() {\n      requestAnimationFrame(() => {\n        Promise.all([\n          getRect(this, '.van-notice-bar__content'),\n          getRect(this, '.van-notice-bar__wrap'),\n        ]).then((rects) => {\n          const [contentRect, wrapRect] = rects;\n          const { speed, scrollable, delay } = this.data;\n          if (\n            contentRect == null ||\n            wrapRect == null ||\n            !contentRect.width ||\n            !wrapRect.width ||\n            scrollable === false\n          ) {\n            return;\n          }\n\n          if (scrollable || wrapRect.width < contentRect.width) {\n            const duration =\n              ((wrapRect.width + contentRect.width) / speed) * 1000;\n\n            this.wrapWidth = wrapRect.width;\n            this.contentWidth = contentRect.width;\n            this.duration = duration;\n            this.animation = wx.createAnimation({\n              duration,\n              timingFunction: 'linear',\n              delay,\n            });\n\n            this.scroll(true);\n          }\n        });\n      });\n    }",
              "scroll": "scroll(isInit = false) {\n      this.timer && clearTimeout(this.timer);\n      this.timer = null;\n\n      this.setData({\n        animationData: this.resetAnimation\n          .translateX(isInit ? 0 : this.wrapWidth)\n          .step()\n          .export(),\n      });\n\n      requestAnimationFrame(() => {\n        this.setData({\n          animationData: this.animation\n            .translateX(-this.contentWidth)\n            .step()\n            .export(),\n        });\n      });\n\n      this.timer = setTimeout(() => {\n        this.scroll();\n      }, this.duration + this.data.delay);\n    }",
              "onClickIcon": "onClickIcon(event) {\n      if (this.data.mode === 'closeable') {\n        this.timer && clearTimeout(this.timer);\n        this.timer = null;\n\n        this.setData({ show: false });\n        this.$emit('close', event.detail);\n      }\n    }",
              "onClick": "onClick(event: WechatMiniprogram.TouchEvent) {\n      this.$emit('click', event);\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "var style = require('../wxs/style.wxs');\nvar addUnit = require('../wxs/add-unit.wxs');\n\nfunction rootStyle(data) {\n  return style({\n    color: data.color,\n    'background-color': data.backgroundColor,\n    background: data.background,\n  });\n}\n\nmodule.exports = {\n  rootStyle: rootStyle,\n};\n",
    "statements": [
      {
        "kind": "FirstStatement",
        "text": "var style = require('../wxs/style.wxs');"
      },
      {
        "kind": "FirstStatement",
        "text": "var addUnit = require('../wxs/add-unit.wxs');"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function rootStyle(data) {\n  return style({\n    color: data.color,\n    'background-color': data.backgroundColor,\n    background: data.background,\n  });\n}",
        "name": "rootStyle"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  rootStyle: rootStyle,\n};",
        "expression": "module.exports = {\n  rootStyle: rootStyle,\n}"
      }
    ]
  },
  "wxss": ".van-notice-bar{align-items:center;background-color:var(--notice-bar-background-color,#fffbe8);color:var(--notice-bar-text-color,#ed6a0c);display:flex;font-size:var(--notice-bar-font-size,14px);height:var(--notice-bar-height,40px);line-height:var(--notice-bar-line-height,24px);padding:var(--notice-bar-padding,0 16px)}.van-notice-bar--withicon{padding-right:40px;position:relative}.van-notice-bar--wrapable{height:auto;padding:var(--notice-bar-wrapable-padding,8px 16px)}.van-notice-bar--wrapable .van-notice-bar__wrap{height:auto}.van-notice-bar--wrapable .van-notice-bar__content{position:relative;white-space:normal}.van-notice-bar__left-icon{align-items:center;display:flex;margin-right:4px;vertical-align:middle}.van-notice-bar__left-icon,.van-notice-bar__right-icon{font-size:var(--notice-bar-icon-size,16px);min-width:var(--notice-bar-icon-min-width,22px)}.van-notice-bar__right-icon{position:absolute;right:15px;top:10px}.van-notice-bar__wrap{flex:1;height:var(--notice-bar-line-height,24px);overflow:hidden;position:relative}.van-notice-bar__content{position:absolute;white-space:nowrap}.van-notice-bar__content.van-ellipsis{max-width:100%}"
}