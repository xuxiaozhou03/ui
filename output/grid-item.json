{
  "wxml": [
    {
      "tag": "div",
      "attrs": {
        "class": "custom-class {{ utils.bem('grid-item', { square }) }}",
        ":style": "wrapperStyle",
        "@tap": "onClick"
      },
      "children": [
        {
          "tag": "div",
          "attrs": {
            "class": "content-class {{ utils.bem('grid-item__content', [direction, { center, square, reverse, clickable, surround: border && gutter }]) }} {{ border ? 'van-hairline--surround' : '' }}",
            ":style": "contentStyle"
          },
          "children": [
            {
              "tag": "template",
              "attrs": {
                "v-if": "useSlot"
              },
              "children": [
                {
                  "tag": "slot"
                }
              ]
            },
            {
              "tag": "template",
              "attrs": {
                "v-else": ""
              },
              "children": [
                {
                  "tag": "div",
                  "attrs": {
                    "class": "van-grid-item__icon icon-class"
                  },
                  "children": [
                    {
                      "tag": "van-icon",
                      "attrs": {
                        "v-if": "icon",
                        ":name": "icon",
                        ":color": "iconColor",
                        ":class-prefix": "iconPrefix",
                        ":dot": "dot",
                        ":info": "badge || info",
                        ":size": "iconSize"
                      }
                    },
                    {
                      "tag": "slot",
                      "attrs": {
                        "v-else": "",
                        "name": "icon"
                      }
                    }
                  ]
                },
                {
                  "tag": "div",
                  "attrs": {
                    "class": "van-grid-item__text text-class"
                  },
                  "children": [
                    {
                      "tag": "text",
                      "attrs": {
                        "v-if": "text"
                      }
                    },
                    {
                      "tag": "slot",
                      "attrs": {
                        "v-else": "",
                        "name": "text"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "ts": {
    "kind": "SourceFile",
    "text": "import { VantComponent } from '../common/component';\nimport { useParent } from '../common/relation';\nimport { link } from '../mixins/link';\n\nVantComponent({\n  relation: useParent('grid'),\n\n  classes: ['content-class', 'icon-class', 'text-class'],\n\n  mixins: [link],\n\n  props: {\n    icon: String,\n    iconColor: String,\n    iconPrefix: {\n      type: String,\n      value: 'van-icon',\n    },\n    dot: Boolean,\n    info: null,\n    badge: null,\n    text: String,\n    useSlot: Boolean,\n  },\n\n  data: {\n    viewStyle: '',\n  },\n\n  mounted() {\n    this.updateStyle();\n  },\n\n  methods: {\n    updateStyle() {\n      if (!this.parent) {\n        return;\n      }\n\n      const { data, children } = this.parent;\n      const {\n        columnNum,\n        border,\n        square,\n        gutter,\n        clickable,\n        center,\n        direction,\n        reverse,\n        iconSize,\n      } = data;\n\n      this.setData({\n        center,\n        border,\n        square,\n        gutter,\n        clickable,\n        direction,\n        reverse,\n        iconSize,\n        index: children.indexOf(this),\n        columnNum,\n      });\n    },\n\n    onClick() {\n      this.$emit('click');\n      this.jumpLink();\n    },\n  },\n});\n",
    "statements": [
      {
        "kind": "ImportDeclaration",
        "text": "import { VantComponent } from '../common/component';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { useParent } from '../common/relation';"
      },
      {
        "kind": "ImportDeclaration",
        "text": "import { link } from '../mixins/link';"
      },
      {
        "kind": "ExpressionStatement",
        "text": "VantComponent({\n  relation: useParent('grid'),\n\n  classes: ['content-class', 'icon-class', 'text-class'],\n\n  mixins: [link],\n\n  props: {\n    icon: String,\n    iconColor: String,\n    iconPrefix: {\n      type: String,\n      value: 'van-icon',\n    },\n    dot: Boolean,\n    info: null,\n    badge: null,\n    text: String,\n    useSlot: Boolean,\n  },\n\n  data: {\n    viewStyle: '',\n  },\n\n  mounted() {\n    this.updateStyle();\n  },\n\n  methods: {\n    updateStyle() {\n      if (!this.parent) {\n        return;\n      }\n\n      const { data, children } = this.parent;\n      const {\n        columnNum,\n        border,\n        square,\n        gutter,\n        clickable,\n        center,\n        direction,\n        reverse,\n        iconSize,\n      } = data;\n\n      this.setData({\n        center,\n        border,\n        square,\n        gutter,\n        clickable,\n        direction,\n        reverse,\n        iconSize,\n        index: children.indexOf(this),\n        columnNum,\n      });\n    },\n\n    onClick() {\n      this.$emit('click');\n      this.jumpLink();\n    },\n  },\n});",
        "expression": "VantComponent({\n  relation: useParent('grid'),\n\n  classes: ['content-class', 'icon-class', 'text-class'],\n\n  mixins: [link],\n\n  props: {\n    icon: String,\n    iconColor: String,\n    iconPrefix: {\n      type: String,\n      value: 'van-icon',\n    },\n    dot: Boolean,\n    info: null,\n    badge: null,\n    text: String,\n    useSlot: Boolean,\n  },\n\n  data: {\n    viewStyle: '',\n  },\n\n  mounted() {\n    this.updateStyle();\n  },\n\n  methods: {\n    updateStyle() {\n      if (!this.parent) {\n        return;\n      }\n\n      const { data, children } = this.parent;\n      const {\n        columnNum,\n        border,\n        square,\n        gutter,\n        clickable,\n        center,\n        direction,\n        reverse,\n        iconSize,\n      } = data;\n\n      this.setData({\n        center,\n        border,\n        square,\n        gutter,\n        clickable,\n        direction,\n        reverse,\n        iconSize,\n        index: children.indexOf(this),\n        columnNum,\n      });\n    },\n\n    onClick() {\n      this.$emit('click');\n      this.jumpLink();\n    },\n  },\n})",
        "callee": "VantComponent",
        "arguments": [
          {
            "relation": "useParent('grid')",
            "classes": [
              "'content-class'",
              "'icon-class'",
              "'text-class'"
            ],
            "mixins": [
              "link"
            ],
            "props": {
              "icon": "String",
              "iconColor": "String",
              "iconPrefix": {
                "type": "String",
                "value": "van-icon"
              },
              "dot": "Boolean",
              "info": "null",
              "badge": "null",
              "text": "String",
              "useSlot": "Boolean"
            },
            "data": {
              "viewStyle": ""
            },
            "methods": {
              "updateStyle": "updateStyle() {\n      if (!this.parent) {\n        return;\n      }\n\n      const { data, children } = this.parent;\n      const {\n        columnNum,\n        border,\n        square,\n        gutter,\n        clickable,\n        center,\n        direction,\n        reverse,\n        iconSize,\n      } = data;\n\n      this.setData({\n        center,\n        border,\n        square,\n        gutter,\n        clickable,\n        direction,\n        reverse,\n        iconSize,\n        index: children.indexOf(this),\n        columnNum,\n      });\n    }",
              "onClick": "onClick() {\n      this.$emit('click');\n      this.jumpLink();\n    }"
            }
          }
        ]
      }
    ]
  },
  "wxs": {
    "kind": "SourceFile",
    "text": "var style = require('../wxs/style.wxs');\nvar addUnit = require('../wxs/add-unit.wxs');\n\nfunction wrapperStyle(data) {\n  var width = 100 / data.columnNum + '%';\n\n  return style({\n    width: width,\n    'padding-top': data.square ? width : null,\n    'padding-right': addUnit(data.gutter),\n    'margin-top':\n      data.index >= data.columnNum && !data.square\n        ? addUnit(data.gutter)\n        : null,\n  });\n}\n\nfunction contentStyle(data) {\n  return data.square\n    ? style({\n        right: addUnit(data.gutter),\n        bottom: addUnit(data.gutter),\n        height: 'auto',\n      })\n    : '';\n}\n\nmodule.exports = {\n  wrapperStyle: wrapperStyle,\n  contentStyle: contentStyle,\n};\n",
    "statements": [
      {
        "kind": "FirstStatement",
        "text": "var style = require('../wxs/style.wxs');"
      },
      {
        "kind": "FirstStatement",
        "text": "var addUnit = require('../wxs/add-unit.wxs');"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function wrapperStyle(data) {\n  var width = 100 / data.columnNum + '%';\n\n  return style({\n    width: width,\n    'padding-top': data.square ? width : null,\n    'padding-right': addUnit(data.gutter),\n    'margin-top':\n      data.index >= data.columnNum && !data.square\n        ? addUnit(data.gutter)\n        : null,\n  });\n}",
        "name": "wrapperStyle"
      },
      {
        "kind": "FunctionDeclaration",
        "text": "function contentStyle(data) {\n  return data.square\n    ? style({\n        right: addUnit(data.gutter),\n        bottom: addUnit(data.gutter),\n        height: 'auto',\n      })\n    : '';\n}",
        "name": "contentStyle"
      },
      {
        "kind": "ExpressionStatement",
        "text": "module.exports = {\n  wrapperStyle: wrapperStyle,\n  contentStyle: contentStyle,\n};",
        "expression": "module.exports = {\n  wrapperStyle: wrapperStyle,\n  contentStyle: contentStyle,\n}"
      }
    ]
  },
  "wxss": ".van-grid-item{box-sizing:border-box;float:left;position:relative}.van-grid-item--square{height:0}.van-grid-item__content{background-color:var(--grid-item-content-background-color,#fff);box-sizing:border-box;display:flex;flex-direction:column;height:100%;padding:var(--grid-item-content-padding,16px 8px)}.van-grid-item__content:after{border-width:0 1px 1px 0;z-index:1}.van-grid-item__content--surround:after{border-width:1px}.van-grid-item__content--center{align-items:center;justify-content:center}.van-grid-item__content--square{left:0;position:absolute;right:0;top:0}.van-grid-item__content--horizontal{flex-direction:row}.van-grid-item__content--horizontal .van-grid-item__text{margin:0 0 0 8px}.van-grid-item__content--reverse{flex-direction:column-reverse}.van-grid-item__content--reverse .van-grid-item__text{margin:0 0 8px}.van-grid-item__content--horizontal.van-grid-item__content--reverse{flex-direction:row-reverse}.van-grid-item__content--horizontal.van-grid-item__content--reverse .van-grid-item__text{margin:0 8px 0 0}.van-grid-item__content--clickable:active{background-color:var(--grid-item-content-active-color,#f2f3f5)}.van-grid-item__icon{align-items:center;display:flex;font-size:var(--grid-item-icon-size,26px);height:var(--grid-item-icon-size,26px)}.van-grid-item__text{word-wrap:break-word;color:var(--grid-item-text-color,#646566);font-size:var(--grid-item-text-font-size,12px)}.van-grid-item__icon+.van-grid-item__text{margin-top:8px}"
}